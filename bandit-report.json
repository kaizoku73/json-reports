{
  "errors": [],
  "generated_at": "2025-02-07T07:16:16Z",
  "metrics": {
    "DSVPWA/dsvpwa.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 44,
      "nosec": 0,
      "skipped_tests": 0
    },
    "DSVPWA/dsvpwa/__init__.py": {
      "CONFIDENCE.HIGH": 0,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 0,
      "SEVERITY.MEDIUM": 0,
      "SEVERITY.UNDEFINED": 0,
      "loc": 6,
      "nosec": 0,
      "skipped_tests": 0
    },
    "DSVPWA/dsvpwa/attacks.py": {
      "CONFIDENCE.HIGH": 5,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 3,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 1,
      "SEVERITY.LOW": 3,
      "SEVERITY.MEDIUM": 4,
      "SEVERITY.UNDEFINED": 0,
      "loc": 316,
      "nosec": 0,
      "skipped_tests": 0
    },
    "DSVPWA/dsvpwa/handlers.py": {
      "CONFIDENCE.HIGH": 5,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 1,
      "SEVERITY.LOW": 2,
      "SEVERITY.MEDIUM": 2,
      "SEVERITY.UNDEFINED": 0,
      "loc": 202,
      "nosec": 0,
      "skipped_tests": 0
    },
    "DSVPWA/dsvpwa/server.py": {
      "CONFIDENCE.HIGH": 2,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 0,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 0,
      "SEVERITY.LOW": 1,
      "SEVERITY.MEDIUM": 1,
      "SEVERITY.UNDEFINED": 0,
      "loc": 39,
      "nosec": 0,
      "skipped_tests": 0
    },
    "_totals": {
      "CONFIDENCE.HIGH": 12,
      "CONFIDENCE.LOW": 0,
      "CONFIDENCE.MEDIUM": 3,
      "CONFIDENCE.UNDEFINED": 0,
      "SEVERITY.HIGH": 2,
      "SEVERITY.LOW": 6,
      "SEVERITY.MEDIUM": 7,
      "SEVERITY.UNDEFINED": 0,
      "loc": 607,
      "nosec": 0,
      "skipped_tests": 0
    }
  },
  "results": [
    {
      "code": "5 import base64\n6 import pickle\n7 import sqlite3\n",
      "col_offset": 0,
      "end_col_offset": 13,
      "filename": "DSVPWA/dsvpwa/attacks.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with pickle module.",
      "line_number": 6,
      "line_range": [
        6
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_imports.html#b403-import-pickle",
      "test_id": "B403",
      "test_name": "blacklist"
    },
    {
      "code": "7 import sqlite3\n8 import subprocess\n9 import urllib.request\n",
      "col_offset": 0,
      "end_col_offset": 17,
      "filename": "DSVPWA/dsvpwa/attacks.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with the subprocess module.",
      "line_number": 8,
      "line_range": [
        8
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "38         try:\n39             cursor.execute(\"SELECT id, username, firstname, lastname, email, session FROM users WHERE id=\" + id)\n40         except sqlite3.OperationalError as e:\n",
      "col_offset": 27,
      "end_col_offset": 106,
      "filename": "DSVPWA/dsvpwa/attacks.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 39,
      "line_range": [
        39
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "166                     ' '.join([command, domain]),\n167                     shell=True,\n168                     stderr=subprocess.STDOUT,\n169                     stdin=subprocess.PIPE\n170                 )\n171                 content = '<pre>{}</pre>'.format(output.decode())\n172 \n173         return content\n",
      "col_offset": 25,
      "end_col_offset": 17,
      "filename": "DSVPWA/dsvpwa/attacks.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "subprocess call with shell=True identified, security issue.",
      "line_number": 167,
      "line_range": [
        165,
        166,
        167,
        168,
        169,
        170
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b602_subprocess_popen_with_shell_equals_true.html",
      "test_id": "B602",
      "test_name": "subprocess_popen_with_shell_equals_true"
    },
    {
      "code": "198             object = params.get('object', '')[0]\n199             content = str(pickle.loads(base64.urlsafe_b64decode(object)))\n200 \n",
      "col_offset": 26,
      "end_col_offset": 72,
      "filename": "DSVPWA/dsvpwa/attacks.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 502,
        "link": "https://cwe.mitre.org/data/definitions/502.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue.",
      "line_number": 199,
      "line_range": [
        199
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_calls.html#b301-pickle",
      "test_id": "B301",
      "test_name": "blacklist"
    },
    {
      "code": "212             else:\n213                 file = urllib.request.urlopen(path)\n214 \n",
      "col_offset": 23,
      "end_col_offset": 51,
      "filename": "DSVPWA/dsvpwa/attacks.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 22,
        "link": "https://cwe.mitre.org/data/definitions/22.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.",
      "line_number": 213,
      "line_range": [
        213
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_calls.html#b310-urllib-urlopen",
      "test_id": "B310",
      "test_name": "blacklist"
    },
    {
      "code": "284 \n285             if username == 'dsvpwa' and password == 'dsvpwa':\n286                 user = ['dsvpwa', 'Default', 'Default', 'dsvpwa']\n",
      "col_offset": 52,
      "end_col_offset": 60,
      "filename": "DSVPWA/dsvpwa/attacks.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 259,
        "link": "https://cwe.mitre.org/data/definitions/259.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Possible hardcoded password: 'dsvpwa'",
      "line_number": 285,
      "line_range": [
        285
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b105_hardcoded_password_string.html",
      "test_id": "B105",
      "test_name": "hardcoded_password_string"
    },
    {
      "code": "288                 try:\n289                     cursor.execute(\"SELECT * FROM users WHERE username='\" +  username + \"' AND password='\" + password + \"'\")\n290                 except sqlite3.OperationalError as e:\n",
      "col_offset": 35,
      "end_col_offset": 73,
      "filename": "DSVPWA/dsvpwa/attacks.py",
      "issue_confidence": "MEDIUM",
      "issue_cwe": {
        "id": 89,
        "link": "https://cwe.mitre.org/data/definitions/89.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Possible SQL injection vector through string-based query construction.",
      "line_number": 289,
      "line_range": [
        289
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b608_hardcoded_sql_expressions.html",
      "test_id": "B608",
      "test_name": "hardcoded_sql_expressions"
    },
    {
      "code": "7 import posixpath\n8 import subprocess\n9 import http.cookies\n",
      "col_offset": 0,
      "end_col_offset": 17,
      "filename": "DSVPWA/dsvpwa/handlers.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Consider possible security implications associated with the subprocess module.",
      "line_number": 8,
      "line_range": [
        8
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_imports.html#b404-import-subprocess",
      "test_id": "B404",
      "test_name": "blacklist"
    },
    {
      "code": "11 import urllib.parse as urlparse\n12 import xml.etree.ElementTree as ET\n13 \n",
      "col_offset": 0,
      "end_col_offset": 34,
      "filename": "DSVPWA/dsvpwa/handlers.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 12,
      "line_range": [
        12
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_imports.html#b405-import-xml-etree",
      "test_id": "B405",
      "test_name": "blacklist"
    },
    {
      "code": "37     attacks = []\n38     for attack in ET.parse('./db/attacks.xml').findall('attack'):\n39         instance = getattr(dsvpwa.attacks, attack.findtext('class'))(\n",
      "col_offset": 18,
      "end_col_offset": 46,
      "filename": "DSVPWA/dsvpwa/handlers.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 38,
      "line_range": [
        38
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "143     routes = {'/' : {'template' : 'index.html'}}\n144     for attack in ET.parse('./db/attacks.xml').findall('attack'):\n145         routes[attack.findtext('route')] = {\n",
      "col_offset": 18,
      "end_col_offset": 46,
      "filename": "DSVPWA/dsvpwa/handlers.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 144,
      "line_range": [
        144
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    },
    {
      "code": "184                 self.path[1:],\n185                 shell=True,\n186                 stderr=subprocess.STDOUT,\n187                 stdin=subprocess.PIPE\n188             )\n189 \n190         self.send_header('Content-type', 'text/plain')\n191         self.send_header('Connection', 'close')\n",
      "col_offset": 22,
      "end_col_offset": 13,
      "filename": "DSVPWA/dsvpwa/handlers.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 78,
        "link": "https://cwe.mitre.org/data/definitions/78.html"
      },
      "issue_severity": "HIGH",
      "issue_text": "subprocess call with shell=True identified, security issue.",
      "line_number": 185,
      "line_range": [
        183,
        184,
        185,
        186,
        187,
        188
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/plugins/b602_subprocess_popen_with_shell_equals_true.html",
      "test_id": "B602",
      "test_name": "subprocess_popen_with_shell_equals_true"
    },
    {
      "code": "1 import sqlite3\n2 import xml.etree.ElementTree as ET\n3 \n",
      "col_offset": 0,
      "end_col_offset": 34,
      "filename": "DSVPWA/dsvpwa/server.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "LOW",
      "issue_text": "Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called.",
      "line_number": 2,
      "line_range": [
        2
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_imports.html#b405-import-xml-etree",
      "test_id": "B405",
      "test_name": "blacklist"
    },
    {
      "code": "8     users = []\n9     for user in ET.parse('./db/users.xml').findall(\"user\"):\n10         users.append((\n",
      "col_offset": 16,
      "end_col_offset": 42,
      "filename": "DSVPWA/dsvpwa/server.py",
      "issue_confidence": "HIGH",
      "issue_cwe": {
        "id": 20,
        "link": "https://cwe.mitre.org/data/definitions/20.html"
      },
      "issue_severity": "MEDIUM",
      "issue_text": "Using xml.etree.ElementTree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called",
      "line_number": 9,
      "line_range": [
        9
      ],
      "more_info": "https://bandit.readthedocs.io/en/1.7.10/blacklists/blacklist_calls.html#b313-b320-xml-bad-elementtree",
      "test_id": "B314",
      "test_name": "blacklist"
    }
  ]
}