{"critical":[{"cwe_ids":["95"],"id":"php_lang_eval_using_user_input","title":"Unsanitized user input in 'eval' type function","description":"## Description\n\nExecuting code with 'eval' or similar functions using unsanitized user input is risky and can lead to code injection vulnerabilities. This happens when external input is used directly in functions that execute code, allowing attackers to run malicious code within your application.\n\n## Remediations\n\n- **Do not** use 'eval' or similar functions with user-supplied data. This can open your application to severe security risks.\n  ```php\n  eval(\"echo \" . $_GET[\"untrusted\"]);  // unsafe\n  ```\n- **Do** validate and sanitize all user input before using it in your code. Ensure that the input does not contain malicious code or commands.\n- **Do** use safer alternatives to 'eval' for dynamic code execution. Consider using functions that limit the scope and capabilities of executed code to reduce risk.\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_eval_using_user_input","line_number":20,"full_filename":"DVWA/vulnerabilities/view_help.php","filename":"vulnerabilities/view_help.php","category_groups":["PII","Personal Data"],"source":{"start":20,"end":20,"column":{"start":3,"end":111}},"sink":{"start":20,"end":20,"column":{"start":3,"end":111},"content":""},"parent_line_number":20,"fingerprint":"2e9ebd86a8ac134f0a530f52e0c23bf7_0","old_fingerprint":"f8884adf5bc0df07f00f3f1d240e0436_0","code_extract":"\t\teval( '?\u003e' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.php\" ) . '\u003c?php ' );"},{"cwe_ids":["95"],"id":"php_lang_eval_using_user_input","title":"Unsanitized user input in 'eval' type function","description":"## Description\n\nExecuting code with 'eval' or similar functions using unsanitized user input is risky and can lead to code injection vulnerabilities. This happens when external input is used directly in functions that execute code, allowing attackers to run malicious code within your application.\n\n## Remediations\n\n- **Do not** use 'eval' or similar functions with user-supplied data. This can open your application to severe security risks.\n  ```php\n  eval(\"echo \" . $_GET[\"untrusted\"]);  // unsafe\n  ```\n- **Do** validate and sanitize all user input before using it in your code. Ensure that the input does not contain malicious code or commands.\n- **Do** use safer alternatives to 'eval' for dynamic code execution. Consider using functions that limit the scope and capabilities of executed code to reduce risk.\n\n## References\n\n- [OWASP Code injection explained](https://owasp.org/www-community/attacks/Code_Injection)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_eval_using_user_input","line_number":22,"full_filename":"DVWA/vulnerabilities/view_help.php","filename":"vulnerabilities/view_help.php","category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":3,"end":121}},"sink":{"start":22,"end":22,"column":{"start":3,"end":121},"content":""},"parent_line_number":22,"fingerprint":"2e9ebd86a8ac134f0a530f52e0c23bf7_1","old_fingerprint":"f8884adf5bc0df07f00f3f1d240e0436_1","code_extract":"\t\teval( '?\u003e' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.{$locale}.php\" ) . '\u003c?php ' );"},{"cwe_ids":["78"],"id":"php_lang_exec_using_user_input","title":"Unsanitized user input in OS command","description":"## Description\n\nExecuting OS commands that include user-supplied data can lead to command injection vulnerabilities. This occurs when an application dynamically executes OS commands that an attacker can manipulate through user input.\n\n## Remediations\n\n- **Do not** directly include user input in commands to be executed by the OS. This can allow attackers to inject malicious commands.\n  ```php\n  exec($_GET[\"command\"]); // unsafe\n  ```\n- **Do** use a predefined set of commands instead of directly including user input, if user input has to influence the execution flow.\n  ```php\n  if ($_GET[\"action\"] == \"option1\") {\n    $command = \"command1\";\n  } else {\n    $command = \"command2\";\n  }\n\n  exec($command);\n  ```\n\n## References\n\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_exec_using_user_input","line_number":26,"full_filename":"DVWA/vulnerabilities/exec/source/high.php","filename":"vulnerabilities/exec/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":26,"end":26,"column":{"start":10,"end":42}},"sink":{"start":26,"end":26,"column":{"start":10,"end":42},"content":""},"parent_line_number":26,"fingerprint":"b74d624a64b0edade7039c8fce9bc250_0","old_fingerprint":"2f5349f8359a7019a29a52e500daf3e5_5","code_extract":"\t\t$cmd = shell_exec( 'ping  ' . $target );"},{"cwe_ids":["78"],"id":"php_lang_exec_using_user_input","title":"Unsanitized user input in OS command","description":"## Description\n\nExecuting OS commands that include user-supplied data can lead to command injection vulnerabilities. This occurs when an application dynamically executes OS commands that an attacker can manipulate through user input.\n\n## Remediations\n\n- **Do not** directly include user input in commands to be executed by the OS. This can allow attackers to inject malicious commands.\n  ```php\n  exec($_GET[\"command\"]); // unsafe\n  ```\n- **Do** use a predefined set of commands instead of directly including user input, if user input has to influence the execution flow.\n  ```php\n  if ($_GET[\"action\"] == \"option1\") {\n    $command = \"command1\";\n  } else {\n    $command = \"command2\";\n  }\n\n  exec($command);\n  ```\n\n## References\n\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_exec_using_user_input","line_number":30,"full_filename":"DVWA/vulnerabilities/exec/source/high.php","filename":"vulnerabilities/exec/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":30,"end":30,"column":{"start":10,"end":47}},"sink":{"start":30,"end":30,"column":{"start":10,"end":47},"content":""},"parent_line_number":30,"fingerprint":"b74d624a64b0edade7039c8fce9bc250_1","old_fingerprint":"2f5349f8359a7019a29a52e500daf3e5_7","code_extract":"\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );"},{"cwe_ids":["78"],"id":"php_lang_exec_using_user_input","title":"Unsanitized user input in OS command","description":"## Description\n\nExecuting OS commands that include user-supplied data can lead to command injection vulnerabilities. This occurs when an application dynamically executes OS commands that an attacker can manipulate through user input.\n\n## Remediations\n\n- **Do not** directly include user input in commands to be executed by the OS. This can allow attackers to inject malicious commands.\n  ```php\n  exec($_GET[\"command\"]); // unsafe\n  ```\n- **Do** use a predefined set of commands instead of directly including user input, if user input has to influence the execution flow.\n  ```php\n  if ($_GET[\"action\"] == \"option1\") {\n    $command = \"command1\";\n  } else {\n    $command = \"command2\";\n  }\n\n  exec($command);\n  ```\n\n## References\n\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_exec_using_user_input","line_number":22,"full_filename":"DVWA/vulnerabilities/exec/source/impossible.php","filename":"vulnerabilities/exec/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":11,"end":43}},"sink":{"start":22,"end":22,"column":{"start":11,"end":43},"content":""},"parent_line_number":22,"fingerprint":"4c6c034199005fc828d51a3082b3f19e_0","old_fingerprint":"45d2525ee1a5104705bd83aba1d14ef6_3","code_extract":"\t\t\t$cmd = shell_exec( 'ping  ' . $target );"},{"cwe_ids":["78"],"id":"php_lang_exec_using_user_input","title":"Unsanitized user input in OS command","description":"## Description\n\nExecuting OS commands that include user-supplied data can lead to command injection vulnerabilities. This occurs when an application dynamically executes OS commands that an attacker can manipulate through user input.\n\n## Remediations\n\n- **Do not** directly include user input in commands to be executed by the OS. This can allow attackers to inject malicious commands.\n  ```php\n  exec($_GET[\"command\"]); // unsafe\n  ```\n- **Do** use a predefined set of commands instead of directly including user input, if user input has to influence the execution flow.\n  ```php\n  if ($_GET[\"action\"] == \"option1\") {\n    $command = \"command1\";\n  } else {\n    $command = \"command2\";\n  }\n\n  exec($command);\n  ```\n\n## References\n\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_exec_using_user_input","line_number":26,"full_filename":"DVWA/vulnerabilities/exec/source/impossible.php","filename":"vulnerabilities/exec/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":26,"end":26,"column":{"start":11,"end":48}},"sink":{"start":26,"end":26,"column":{"start":11,"end":48},"content":""},"parent_line_number":26,"fingerprint":"4c6c034199005fc828d51a3082b3f19e_1","old_fingerprint":"45d2525ee1a5104705bd83aba1d14ef6_6","code_extract":"\t\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );"},{"cwe_ids":["78"],"id":"php_lang_exec_using_user_input","title":"Unsanitized user input in OS command","description":"## Description\n\nExecuting OS commands that include user-supplied data can lead to command injection vulnerabilities. This occurs when an application dynamically executes OS commands that an attacker can manipulate through user input.\n\n## Remediations\n\n- **Do not** directly include user input in commands to be executed by the OS. This can allow attackers to inject malicious commands.\n  ```php\n  exec($_GET[\"command\"]); // unsafe\n  ```\n- **Do** use a predefined set of commands instead of directly including user input, if user input has to influence the execution flow.\n  ```php\n  if ($_GET[\"action\"] == \"option1\") {\n    $command = \"command1\";\n  } else {\n    $command = \"command2\";\n  }\n\n  exec($command);\n  ```\n\n## References\n\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_exec_using_user_input","line_number":10,"full_filename":"DVWA/vulnerabilities/exec/source/low.php","filename":"vulnerabilities/exec/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":10,"end":10,"column":{"start":10,"end":42}},"sink":{"start":10,"end":10,"column":{"start":10,"end":42},"content":""},"parent_line_number":10,"fingerprint":"ecde5fe09475941ad0e678e529ae8dc1_0","old_fingerprint":"f463ebc48442ad1579cce807255207a6_0","code_extract":"\t\t$cmd = shell_exec( 'ping  ' . $target );"},{"cwe_ids":["78"],"id":"php_lang_exec_using_user_input","title":"Unsanitized user input in OS command","description":"## Description\n\nExecuting OS commands that include user-supplied data can lead to command injection vulnerabilities. This occurs when an application dynamically executes OS commands that an attacker can manipulate through user input.\n\n## Remediations\n\n- **Do not** directly include user input in commands to be executed by the OS. This can allow attackers to inject malicious commands.\n  ```php\n  exec($_GET[\"command\"]); // unsafe\n  ```\n- **Do** use a predefined set of commands instead of directly including user input, if user input has to influence the execution flow.\n  ```php\n  if ($_GET[\"action\"] == \"option1\") {\n    $command = \"command1\";\n  } else {\n    $command = \"command2\";\n  }\n\n  exec($command);\n  ```\n\n## References\n\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_exec_using_user_input","line_number":14,"full_filename":"DVWA/vulnerabilities/exec/source/low.php","filename":"vulnerabilities/exec/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":10,"end":47}},"sink":{"start":14,"end":14,"column":{"start":10,"end":47},"content":""},"parent_line_number":14,"fingerprint":"ecde5fe09475941ad0e678e529ae8dc1_1","old_fingerprint":"f463ebc48442ad1579cce807255207a6_1","code_extract":"\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );"},{"cwe_ids":["78"],"id":"php_lang_exec_using_user_input","title":"Unsanitized user input in OS command","description":"## Description\n\nExecuting OS commands that include user-supplied data can lead to command injection vulnerabilities. This occurs when an application dynamically executes OS commands that an attacker can manipulate through user input.\n\n## Remediations\n\n- **Do not** directly include user input in commands to be executed by the OS. This can allow attackers to inject malicious commands.\n  ```php\n  exec($_GET[\"command\"]); // unsafe\n  ```\n- **Do** use a predefined set of commands instead of directly including user input, if user input has to influence the execution flow.\n  ```php\n  if ($_GET[\"action\"] == \"option1\") {\n    $command = \"command1\";\n  } else {\n    $command = \"command2\";\n  }\n\n  exec($command);\n  ```\n\n## References\n\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_exec_using_user_input","line_number":19,"full_filename":"DVWA/vulnerabilities/exec/source/medium.php","filename":"vulnerabilities/exec/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":19,"end":19,"column":{"start":10,"end":42}},"sink":{"start":19,"end":19,"column":{"start":10,"end":42},"content":""},"parent_line_number":19,"fingerprint":"5c5143b51550debd47c24a805dc34f42_0","old_fingerprint":"518e3ff26bf405d7ca974b713ce37b38_2","code_extract":"\t\t$cmd = shell_exec( 'ping  ' . $target );"},{"cwe_ids":["78"],"id":"php_lang_exec_using_user_input","title":"Unsanitized user input in OS command","description":"## Description\n\nExecuting OS commands that include user-supplied data can lead to command injection vulnerabilities. This occurs when an application dynamically executes OS commands that an attacker can manipulate through user input.\n\n## Remediations\n\n- **Do not** directly include user input in commands to be executed by the OS. This can allow attackers to inject malicious commands.\n  ```php\n  exec($_GET[\"command\"]); // unsafe\n  ```\n- **Do** use a predefined set of commands instead of directly including user input, if user input has to influence the execution flow.\n  ```php\n  if ($_GET[\"action\"] == \"option1\") {\n    $command = \"command1\";\n  } else {\n    $command = \"command2\";\n  }\n\n  exec($command);\n  ```\n\n## References\n\n- [OWASP OS command injection cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_exec_using_user_input","line_number":23,"full_filename":"DVWA/vulnerabilities/exec/source/medium.php","filename":"vulnerabilities/exec/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":23,"end":23,"column":{"start":10,"end":47}},"sink":{"start":23,"end":23,"column":{"start":10,"end":47},"content":""},"parent_line_number":23,"fingerprint":"5c5143b51550debd47c24a805dc34f42_1","old_fingerprint":"518e3ff26bf405d7ca974b713ce37b38_4","code_extract":"\t\t$cmd = shell_exec( 'ping  -c 4 ' . $target );"},{"cwe_ids":["89"],"id":"php_lang_sql_injection","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```php\n  $sortingOrder = $_GET['untrusted'];\n  $query  = \"SELECT id, name FROM products ORDER BY name LIMIT 20 $sortingOrder;\"; // unsafe\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```php\n  $sortingOrder = $_GET['sortingOrder'] === 'DESC' ? 'DESC' : 'ASC';\n  ```\n- **Do** use safe lists to validate external input, if dynamic input is required.\n  ```php\n  private function validatedTableName($table_name)\n  {\n    if in_array($table_name, $ALLOWED_TABLE_NAMES) {\n      return $table_name\n    }\n    // handle invalid table name\n  }\n  ```\n- **Do** use prepared statements for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.\n  ```php\n  $stmt = $pdo-\u003eprepare(\"SELECT * FROM products WHERE id LIKE ? ORDER BY price {$sortingOrder}\");\n  $stmt-\u003eexecute([\"%{$productId}%\"]);\n  ```\n- **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.\n  ```php\n  $ok = mysqli_real_escape_string($conn, $_GET['ok']);\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_sql_injection","line_number":13,"full_filename":"DVWA/vulnerabilities/brute/source/low.php","filename":"vulnerabilities/brute/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":13,"end":13,"column":{"start":12,"end":62}},"sink":{"start":13,"end":13,"column":{"start":12,"end":62},"content":""},"parent_line_number":13,"fingerprint":"ddeed4dc3fc055eb570d550d7cb14007_0","old_fingerprint":"ecbdb5e596eeae7a24cf6c3579dbaec5_1","code_extract":"\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $query ) or die( '\u003cpre\u003e' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '\u003c/pre\u003e' );"},{"cwe_ids":["89"],"id":"php_lang_sql_injection","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```php\n  $sortingOrder = $_GET['untrusted'];\n  $query  = \"SELECT id, name FROM products ORDER BY name LIMIT 20 $sortingOrder;\"; // unsafe\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```php\n  $sortingOrder = $_GET['sortingOrder'] === 'DESC' ? 'DESC' : 'ASC';\n  ```\n- **Do** use safe lists to validate external input, if dynamic input is required.\n  ```php\n  private function validatedTableName($table_name)\n  {\n    if in_array($table_name, $ALLOWED_TABLE_NAMES) {\n      return $table_name\n    }\n    // handle invalid table name\n  }\n  ```\n- **Do** use prepared statements for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.\n  ```php\n  $stmt = $pdo-\u003eprepare(\"SELECT * FROM products WHERE id LIKE ? ORDER BY price {$sortingOrder}\");\n  $stmt-\u003eexecute([\"%{$productId}%\"]);\n  ```\n- **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.\n  ```php\n  $ok = mysqli_real_escape_string($conn, $_GET['ok']);\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_sql_injection","line_number":11,"full_filename":"DVWA/vulnerabilities/sqli/source/low.php","filename":"vulnerabilities/sqli/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":14,"end":64}},"sink":{"start":11,"end":11,"column":{"start":14,"end":64},"content":""},"parent_line_number":11,"fingerprint":"3416e9dd36611b47391fb17c86c891fa_0","old_fingerprint":"39015e48da55037168b582e51b215e40_0","code_extract":"\t\t\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $query ) or die( '\u003cpre\u003e' . ((is_object($GLOBALS[\"___mysqli_ston\"])) ? mysqli_error($GLOBALS[\"___mysqli_ston\"]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '\u003c/pre\u003e' );"},{"cwe_ids":["89"],"id":"php_lang_sql_injection","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```php\n  $sortingOrder = $_GET['untrusted'];\n  $query  = \"SELECT id, name FROM products ORDER BY name LIMIT 20 $sortingOrder;\"; // unsafe\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```php\n  $sortingOrder = $_GET['sortingOrder'] === 'DESC' ? 'DESC' : 'ASC';\n  ```\n- **Do** use safe lists to validate external input, if dynamic input is required.\n  ```php\n  private function validatedTableName($table_name)\n  {\n    if in_array($table_name, $ALLOWED_TABLE_NAMES) {\n      return $table_name\n    }\n    // handle invalid table name\n  }\n  ```\n- **Do** use prepared statements for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.\n  ```php\n  $stmt = $pdo-\u003eprepare(\"SELECT * FROM products WHERE id LIKE ? ORDER BY price {$sortingOrder}\");\n  $stmt-\u003eexecute([\"%{$productId}%\"]);\n  ```\n- **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.\n  ```php\n  $ok = mysqli_real_escape_string($conn, $_GET['ok']);\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_sql_injection","line_number":13,"full_filename":"DVWA/vulnerabilities/sqli_blind/source/high.php","filename":"vulnerabilities/sqli_blind/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":13,"end":13,"column":{"start":15,"end":65}},"sink":{"start":13,"end":13,"column":{"start":15,"end":65},"content":""},"parent_line_number":13,"fingerprint":"c17f478f5e103b799055d349318dc788_0","old_fingerprint":"a691726021f37fed0c427dbde65609de_2","code_extract":"\t\t\t\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $query ); // Removed 'or die' to suppress mysql errors"},{"cwe_ids":["89"],"id":"php_lang_sql_injection","title":"Unsanitized external input in SQL query","description":"## Description\n\nUsing unsanitized data, such as user input or request data, or externally influenced data passed to a function, in SQL query exposes your application to SQL injection attacks. This vulnerability arises when externally controlled data is directly included in SQL statements without proper sanitation, allowing attackers to manipulate queries and access or modify data.\n\n## Remediations\n\n- **Do not** include raw external input in SQL queries. This practice can lead to SQL injection vulnerabilities.\n  ```php\n  $sortingOrder = $_GET['untrusted'];\n  $query  = \"SELECT id, name FROM products ORDER BY name LIMIT 20 $sortingOrder;\"; // unsafe\n  ```\n- **Do** validate all external input to ensure it meets the expected format before including it in SQL queries.\n  ```php\n  $sortingOrder = $_GET['sortingOrder'] === 'DESC' ? 'DESC' : 'ASC';\n  ```\n- **Do** use safe lists to validate external input, if dynamic input is required.\n  ```php\n  private function validatedTableName($table_name)\n  {\n    if in_array($table_name, $ALLOWED_TABLE_NAMES) {\n      return $table_name\n    }\n    // handle invalid table name\n  }\n  ```\n- **Do** use prepared statements for database queries to separate SQL logic from external input, significantly reducing the risk of SQL injection.\n  ```php\n  $stmt = $pdo-\u003eprepare(\"SELECT * FROM products WHERE id LIKE ? ORDER BY price {$sortingOrder}\");\n  $stmt-\u003eexecute([\"%{$productId}%\"]);\n  ```\n- **Do** escape all external input using appropriate database-specific escaping functions before including it in SQL queries.\n  ```php\n  $ok = mysqli_real_escape_string($conn, $_GET['ok']);\n  ```\n\n## References\n\n- [OWASP SQL injection explained](https://owasp.org/www-community/attacks/SQL_Injection)\n- [OWASP SQL injection prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_sql_injection","line_number":13,"full_filename":"DVWA/vulnerabilities/sqli_blind/source/low.php","filename":"vulnerabilities/sqli_blind/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":13,"end":13,"column":{"start":15,"end":65}},"sink":{"start":13,"end":13,"column":{"start":15,"end":65},"content":""},"parent_line_number":13,"fingerprint":"d4af3b1e935a2c6a0e82b8f36fc89498_0","old_fingerprint":"4c766bc3391f82724202e403bdd1b006_3","code_extract":"\t\t\t\t$result = mysqli_query($GLOBALS[\"___mysqli_ston\"],  $query ); // Removed 'or die' to suppress mysql errors"}],"high":[{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":43,"full_filename":"DVWA/vulnerabilities/authbypass/authbypass.js","filename":"vulnerabilities/authbypass/authbypass.js","category_groups":["PII","Personal Data"],"source":{"start":43,"end":43,"column":{"start":4,"end":149}},"sink":{"start":43,"end":43,"column":{"start":4,"end":149},"content":""},"parent_line_number":43,"fingerprint":"26674f2f5a4e1ade84eb4e4dd9e33c76_0","old_fingerprint":"c60e63a1c3fe3084b8a2821f5ba6fab7_2","code_extract":"\t\t\tcell0.innerHTML = user['user_id'] + '\u003cinput type=\"hidden\" id=\"user_id_' + user['user_id'] + '\" name=\"user_id\" value=\"' + user['user_id'] + '\" /\u003e';"},{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":45,"full_filename":"DVWA/vulnerabilities/authbypass/authbypass.js","filename":"vulnerabilities/authbypass/authbypass.js","category_groups":["PII","Personal Data"],"source":{"start":45,"end":45,"column":{"start":4,"end":138}},"sink":{"start":45,"end":45,"column":{"start":4,"end":138},"content":""},"parent_line_number":45,"fingerprint":"26674f2f5a4e1ade84eb4e4dd9e33c76_1","old_fingerprint":"c60e63a1c3fe3084b8a2821f5ba6fab7_3","code_extract":"\t\t\tcell1.innerHTML = '\u003cinput type=\"text\" id=\"first_name_' + user['user_id'] + '\" name=\"first_name\" value=\"' + user['first_name'] + '\" /\u003e';"},{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":47,"full_filename":"DVWA/vulnerabilities/authbypass/authbypass.js","filename":"vulnerabilities/authbypass/authbypass.js","category_groups":["PII","Personal Data"],"source":{"start":47,"end":47,"column":{"start":4,"end":129}},"sink":{"start":47,"end":47,"column":{"start":4,"end":129},"content":""},"parent_line_number":47,"fingerprint":"26674f2f5a4e1ade84eb4e4dd9e33c76_2","old_fingerprint":"c60e63a1c3fe3084b8a2821f5ba6fab7_4","code_extract":"\t\t\tcell2.innerHTML = '\u003cinput type=\"text\" id=\"surname_' + user['user_id'] + '\" name=\"surname\" value=\"' + user['surname'] + '\" /\u003e';"},{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":49,"full_filename":"DVWA/vulnerabilities/authbypass/authbypass.js","filename":"vulnerabilities/authbypass/authbypass.js","category_groups":["PII","Personal Data"],"source":{"start":49,"end":49,"column":{"start":4,"end":111}},"sink":{"start":49,"end":49,"column":{"start":4,"end":111},"content":""},"parent_line_number":49,"fingerprint":"26674f2f5a4e1ade84eb4e4dd9e33c76_3","old_fingerprint":"c60e63a1c3fe3084b8a2821f5ba6fab7_5","code_extract":"\t\t\tcell3.innerHTML = '\u003cinput type=\"button\" value=\"Update\" onclick=\"submit_change(' + user['user_id'] + ')\" /\u003e';"},{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":9,"full_filename":"DVWA/vulnerabilities/csp/source/high.js","filename":"vulnerabilities/csp/source/high.js","category_groups":["PII","Personal Data"],"source":{"start":9,"end":9,"column":{"start":3,"end":62}},"sink":{"start":9,"end":9,"column":{"start":3,"end":62},"content":""},"parent_line_number":9,"fingerprint":"db92e67d4fd8d194959055b1fa5d26d0_0","old_fingerprint":"d9908443edb315ff3c374254674bf6ba_0","code_extract":"\t\tdocument.getElementById(\"answer\").innerHTML = obj['answer'];"},{"cwe_ids":["79"],"id":"javascript_lang_dangerous_insert_html","title":"Unsanitized user input in dynamic HTML insertion (XSS)","description":"## Description\n\nUnsanitized user input in dynamic HTML insertion can lead to Cross-Site Scripting (XSS) attacks. This vulnerability arises when user-provided data is directly inserted into the DOM without proper sanitization, potentially allowing attackers to execute malicious scripts.\n\n## Remediations\n\n- **Do** use an HTML sanitization library to clean user input before inserting it into the HTML. This step helps prevent XSS attacks by removing or neutralizing any potentially harmful scripts.\n  ```javascript\n  import sanitizeHtml from 'sanitize-html';\n\n  const html = `\u003cstrong\u003e${user.Input}\u003c/strong\u003e`;\n  document.body.innerHTML = sanitizeHtml(html);\n  ```\n\n## References\n\n- [OWASP XSS explained](https://owasp.org/www-community/attacks/xss/)","documentation_url":"https://docs.bearer.com/reference/rules/javascript_lang_dangerous_insert_html","line_number":9,"full_filename":"DVWA/vulnerabilities/csp/source/impossible.js","filename":"vulnerabilities/csp/source/impossible.js","category_groups":["PII","Personal Data"],"source":{"start":9,"end":9,"column":{"start":3,"end":62}},"sink":{"start":9,"end":9,"column":{"start":3,"end":62},"content":""},"parent_line_number":9,"fingerprint":"6c952b6096f908109ad60620770c291f_0","old_fingerprint":"167c3b7aa407b715a12996efead44635_1","code_extract":"\t\tdocument.getElementById(\"answer\").innerHTML = obj['answer'];"},{"cwe_ids":["918"],"id":"php_lang_http_url_using_user_input","title":"Unsanitized user input in HTTP request (SSRF)","description":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```php\n  $curl = curl_init(\"https://{$_GET['host']}\"); // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```php\n  if ($_GET[\"host\"] == \"option1\") {\n    $host = \"api1.com\";\n  } else {\n    $host = \"api2.com\";\n  }\n\n  $curl = curl_init(\"https://$host\");\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_http_url_using_user_input","line_number":20,"full_filename":"DVWA/vulnerabilities/view_help.php","filename":"vulnerabilities/view_help.php","category_groups":["PII","Personal Data"],"source":{"start":20,"end":20,"column":{"start":16,"end":98}},"sink":{"start":20,"end":20,"column":{"start":16,"end":98},"content":""},"parent_line_number":20,"fingerprint":"15da9456feb20758c32fdc677d1ae089_0","old_fingerprint":"1bf91d989ef3fb6f581b2557ccc3fcea_2","code_extract":"\t\teval( '?\u003e' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.php\" ) . '\u003c?php ' );"},{"cwe_ids":["918"],"id":"php_lang_http_url_using_user_input","title":"Unsanitized user input in HTTP request (SSRF)","description":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```php\n  $curl = curl_init(\"https://{$_GET['host']}\"); // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```php\n  if ($_GET[\"host\"] == \"option1\") {\n    $host = \"api1.com\";\n  } else {\n    $host = \"api2.com\";\n  }\n\n  $curl = curl_init(\"https://$host\");\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_http_url_using_user_input","line_number":22,"full_filename":"DVWA/vulnerabilities/view_help.php","filename":"vulnerabilities/view_help.php","category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":16,"end":108}},"sink":{"start":22,"end":22,"column":{"start":16,"end":108},"content":""},"parent_line_number":22,"fingerprint":"15da9456feb20758c32fdc677d1ae089_1","old_fingerprint":"1bf91d989ef3fb6f581b2557ccc3fcea_3","code_extract":"\t\teval( '?\u003e' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.{$locale}.php\" ) . '\u003c?php ' );"},{"cwe_ids":["918"],"id":"php_lang_http_url_using_user_input","title":"Unsanitized user input in HTTP request (SSRF)","description":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```php\n  $curl = curl_init(\"https://{$_GET['host']}\"); // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```php\n  if ($_GET[\"host\"] == \"option1\") {\n    $host = \"api1.com\";\n  } else {\n    $host = \"api2.com\";\n  }\n\n  $curl = curl_init(\"https://$host\");\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_http_url_using_user_input","line_number":60,"full_filename":"DVWA/vulnerabilities/view_source.php","filename":"vulnerabilities/view_source.php","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":104}},"sink":{"start":60,"end":60,"column":{"start":13,"end":104},"content":""},"parent_line_number":60,"fingerprint":"4db9322411e1954ee4fa6482041df67e_0","old_fingerprint":"7b3fafcd64f3004a06428f848301ae98_6","code_extract":"\t$source = @file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.php\" );"},{"cwe_ids":["918"],"id":"php_lang_http_url_using_user_input","title":"Unsanitized user input in HTTP request (SSRF)","description":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```php\n  $curl = curl_init(\"https://{$_GET['host']}\"); // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```php\n  if ($_GET[\"host\"] == \"option1\") {\n    $host = \"api1.com\";\n  } else {\n    $host = \"api2.com\";\n  }\n\n  $curl = curl_init(\"https://$host\");\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_http_url_using_user_input","line_number":65,"full_filename":"DVWA/vulnerabilities/view_source.php","filename":"vulnerabilities/view_source.php","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":17,"end":107}},"sink":{"start":65,"end":65,"column":{"start":17,"end":107},"content":""},"parent_line_number":65,"fingerprint":"4db9322411e1954ee4fa6482041df67e_1","old_fingerprint":"7b3fafcd64f3004a06428f848301ae98_7","code_extract":"\t\t$js_source = @file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.js\" );"},{"cwe_ids":["918"],"id":"php_lang_http_url_using_user_input","title":"Unsanitized user input in HTTP request (SSRF)","description":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```php\n  $curl = curl_init(\"https://{$_GET['host']}\"); // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```php\n  if ($_GET[\"host\"] == \"option1\") {\n    $host = \"api1.com\";\n  } else {\n    $host = \"api2.com\";\n  }\n\n  $curl = curl_init(\"https://$host\");\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_http_url_using_user_input","line_number":14,"full_filename":"DVWA/vulnerabilities/view_source_all.php","filename":"vulnerabilities/view_source_all.php","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":13,"end":56}},"sink":{"start":14,"end":14,"column":{"start":13,"end":56},"content":""},"parent_line_number":14,"fingerprint":"c9d021d8d1a222a237da8c4a0563673d_0","old_fingerprint":"ae75922a1403ab6438f0d3a5e2bf6564_0","code_extract":"\t$lowsrc = @file_get_contents(\"./{$id}/source/low.php\");"},{"cwe_ids":["918"],"id":"php_lang_http_url_using_user_input","title":"Unsanitized user input in HTTP request (SSRF)","description":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```php\n  $curl = curl_init(\"https://{$_GET['host']}\"); // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```php\n  if ($_GET[\"host\"] == \"option1\") {\n    $host = \"api1.com\";\n  } else {\n    $host = \"api2.com\";\n  }\n\n  $curl = curl_init(\"https://$host\");\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_http_url_using_user_input","line_number":18,"full_filename":"DVWA/vulnerabilities/view_source_all.php","filename":"vulnerabilities/view_source_all.php","category_groups":["PII","Personal Data"],"source":{"start":18,"end":18,"column":{"start":13,"end":59}},"sink":{"start":18,"end":18,"column":{"start":13,"end":59},"content":""},"parent_line_number":18,"fingerprint":"c9d021d8d1a222a237da8c4a0563673d_1","old_fingerprint":"ae75922a1403ab6438f0d3a5e2bf6564_1","code_extract":"\t$medsrc = @file_get_contents(\"./{$id}/source/medium.php\");"},{"cwe_ids":["918"],"id":"php_lang_http_url_using_user_input","title":"Unsanitized user input in HTTP request (SSRF)","description":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```php\n  $curl = curl_init(\"https://{$_GET['host']}\"); // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```php\n  if ($_GET[\"host\"] == \"option1\") {\n    $host = \"api1.com\";\n  } else {\n    $host = \"api2.com\";\n  }\n\n  $curl = curl_init(\"https://$host\");\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_http_url_using_user_input","line_number":22,"full_filename":"DVWA/vulnerabilities/view_source_all.php","filename":"vulnerabilities/view_source_all.php","category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":14,"end":58}},"sink":{"start":22,"end":22,"column":{"start":14,"end":58},"content":""},"parent_line_number":22,"fingerprint":"c9d021d8d1a222a237da8c4a0563673d_2","old_fingerprint":"ae75922a1403ab6438f0d3a5e2bf6564_4","code_extract":"\t$highsrc = @file_get_contents(\"./{$id}/source/high.php\");"},{"cwe_ids":["918"],"id":"php_lang_http_url_using_user_input","title":"Unsanitized user input in HTTP request (SSRF)","description":"## Description\n\nYour application is vulnerable to Server-Side Request Forgery (SSRF) attacks when it connects to URLs that include user-supplied data. This vulnerability occurs because attackers can manipulate these URLs to force your application to make unintended requests to internal or external resources.\n\n## Remediations\n\n- **Do not** directly include user input in HTTP URLs. This practice can lead to SSRF vulnerabilities, where attackers exploit the application to send requests to unintended destinations.\n  ```php\n  $curl = curl_init(\"https://{$_GET['host']}\"); // unsafe\n  ```\n- **Do** validate or map user input against a predefined list of safe values before using it to form URLs. This approach ensures that the application only connects to intended and safe locations.\n  ```php\n  if ($_GET[\"host\"] == \"option1\") {\n    $host = \"api1.com\";\n  } else {\n    $host = \"api2.com\";\n  }\n\n  $curl = curl_init(\"https://$host\");\n  ```\n\n## References\n\n- [OWASP - Server-Side Request Forgery (SSRF) prevention cheat sheet](https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_http_url_using_user_input","line_number":26,"full_filename":"DVWA/vulnerabilities/view_source_all.php","filename":"vulnerabilities/view_source_all.php","category_groups":["PII","Personal Data"],"source":{"start":26,"end":26,"column":{"start":13,"end":63}},"sink":{"start":26,"end":26,"column":{"start":13,"end":63},"content":""},"parent_line_number":26,"fingerprint":"c9d021d8d1a222a237da8c4a0563673d_3","old_fingerprint":"ae75922a1403ab6438f0d3a5e2bf6564_5","code_extract":"\t$impsrc = @file_get_contents(\"./{$id}/source/impossible.php\");"},{"cwe_ids":["73"],"id":"php_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_path_using_user_input","line_number":20,"full_filename":"DVWA/vulnerabilities/view_help.php","filename":"vulnerabilities/view_help.php","category_groups":["PII","Personal Data"],"source":{"start":20,"end":20,"column":{"start":16,"end":98}},"sink":{"start":20,"end":20,"column":{"start":16,"end":98},"content":""},"parent_line_number":20,"fingerprint":"bbebebc2d574eb0509649d0c9d6b1b50_0","old_fingerprint":"50279fb224e75aa44ccd6871fd265a6e_2","code_extract":"\t\teval( '?\u003e' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.php\" ) . '\u003c?php ' );"},{"cwe_ids":["73"],"id":"php_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_path_using_user_input","line_number":22,"full_filename":"DVWA/vulnerabilities/view_help.php","filename":"vulnerabilities/view_help.php","category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":16,"end":108}},"sink":{"start":22,"end":22,"column":{"start":16,"end":108},"content":""},"parent_line_number":22,"fingerprint":"bbebebc2d574eb0509649d0c9d6b1b50_1","old_fingerprint":"50279fb224e75aa44ccd6871fd265a6e_3","code_extract":"\t\teval( '?\u003e' . file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/help/help.{$locale}.php\" ) . '\u003c?php ' );"},{"cwe_ids":["73"],"id":"php_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_path_using_user_input","line_number":60,"full_filename":"DVWA/vulnerabilities/view_source.php","filename":"vulnerabilities/view_source.php","category_groups":["PII","Personal Data"],"source":{"start":60,"end":60,"column":{"start":13,"end":104}},"sink":{"start":60,"end":60,"column":{"start":13,"end":104},"content":""},"parent_line_number":60,"fingerprint":"44e1a0d81ca9ab43db3e92a57c2ef3d4_0","old_fingerprint":"299ed07c2350256d6bc7a362588825a2_6","code_extract":"\t$source = @file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.php\" );"},{"cwe_ids":["73"],"id":"php_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_path_using_user_input","line_number":64,"full_filename":"DVWA/vulnerabilities/view_source.php","filename":"vulnerabilities/view_source.php","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":6,"end":89}},"sink":{"start":64,"end":64,"column":{"start":6,"end":89},"content":""},"parent_line_number":64,"fingerprint":"44e1a0d81ca9ab43db3e92a57c2ef3d4_1","old_fingerprint":"299ed07c2350256d6bc7a362588825a2_7","code_extract":"\tif (file_exists (DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.js\")) {"},{"cwe_ids":["73"],"id":"php_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_path_using_user_input","line_number":65,"full_filename":"DVWA/vulnerabilities/view_source.php","filename":"vulnerabilities/view_source.php","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":17,"end":107}},"sink":{"start":65,"end":65,"column":{"start":17,"end":107},"content":""},"parent_line_number":65,"fingerprint":"44e1a0d81ca9ab43db3e92a57c2ef3d4_2","old_fingerprint":"299ed07c2350256d6bc7a362588825a2_8","code_extract":"\t\t$js_source = @file_get_contents( DVWA_WEB_PAGE_TO_ROOT . \"vulnerabilities/{$id}/source/{$security}.js\" );"},{"cwe_ids":["73"],"id":"php_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_path_using_user_input","line_number":14,"full_filename":"DVWA/vulnerabilities/view_source_all.php","filename":"vulnerabilities/view_source_all.php","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":13,"end":56}},"sink":{"start":14,"end":14,"column":{"start":13,"end":56},"content":""},"parent_line_number":14,"fingerprint":"4ad63ffd50a32202e860c954c0410888_0","old_fingerprint":"fd0bda16c132286eedb20a39e00a9a30_0","code_extract":"\t$lowsrc = @file_get_contents(\"./{$id}/source/low.php\");"},{"cwe_ids":["73"],"id":"php_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_path_using_user_input","line_number":18,"full_filename":"DVWA/vulnerabilities/view_source_all.php","filename":"vulnerabilities/view_source_all.php","category_groups":["PII","Personal Data"],"source":{"start":18,"end":18,"column":{"start":13,"end":59}},"sink":{"start":18,"end":18,"column":{"start":13,"end":59},"content":""},"parent_line_number":18,"fingerprint":"4ad63ffd50a32202e860c954c0410888_1","old_fingerprint":"fd0bda16c132286eedb20a39e00a9a30_1","code_extract":"\t$medsrc = @file_get_contents(\"./{$id}/source/medium.php\");"},{"cwe_ids":["73"],"id":"php_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_path_using_user_input","line_number":22,"full_filename":"DVWA/vulnerabilities/view_source_all.php","filename":"vulnerabilities/view_source_all.php","category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":14,"end":58}},"sink":{"start":22,"end":22,"column":{"start":14,"end":58},"content":""},"parent_line_number":22,"fingerprint":"4ad63ffd50a32202e860c954c0410888_2","old_fingerprint":"fd0bda16c132286eedb20a39e00a9a30_4","code_extract":"\t$highsrc = @file_get_contents(\"./{$id}/source/high.php\");"},{"cwe_ids":["73"],"id":"php_lang_path_using_user_input","title":"Unsanitized user input in file path","description":"## Description\n\nUnsanitized user input in file paths can compromise your system's security. This vulnerability arises when user input is directly used to construct file names or paths without proper sanitization, potentially leading to path manipulation. Attackers could exploit this to access files or directories outside the intended scope, posing a significant security risk.\n\n## Remediations\n\n- **Do not** use unsanitized user input to construct file paths. Unchecked input can be manipulated to access unauthorized files.\n- **Do** restrict user input to a predefined list of allowed values when constructing file paths. This limits the scope of accessible resources to only those explicitly permitted.\n  ```php\n  $allowed_filenames = array(\"resource-1\", \"resource-2\");\n  $filename = $_GET[\"resource_name\"];\n\n  if (in_array($filename, $allowed_filenames)) {\n    readfile(\"/files/${filename}\");\n  } else {\n    // Handle unexpected filename\n  }\n  ```\n- **Do** validate and sanitize file paths against a safe base path. This ensures that the resulting path is within a controlled and expected directory.\n  ```php\n  $path = realpath(\"/safe/prefix/\" . $_GET[\"resource_name\"]);\n  if (str_starts_with($path, \"/safe/prefix/\")) {\n    readfile($path);\n  } else {\n    // Handle unexpected path\n  }\n  ```\n\n## References\n\n- [OWASP path traversal attack](https://owasp.org/www-community/attacks/Path_Traversal)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_path_using_user_input","line_number":26,"full_filename":"DVWA/vulnerabilities/view_source_all.php","filename":"vulnerabilities/view_source_all.php","category_groups":["PII","Personal Data"],"source":{"start":26,"end":26,"column":{"start":13,"end":63}},"sink":{"start":26,"end":26,"column":{"start":13,"end":63},"content":""},"parent_line_number":26,"fingerprint":"4ad63ffd50a32202e860c954c0410888_3","old_fingerprint":"fd0bda16c132286eedb20a39e00a9a30_5","code_extract":"\t$impsrc = @file_get_contents(\"./{$id}/source/impossible.php\");"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":28,"full_filename":"DVWA/vulnerabilities/brute/source/high.php","filename":"vulnerabilities/brute/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":28,"end":28,"column":{"start":3,"end":67}},"sink":{"start":28,"end":28,"column":{"start":12,"end":67},"content":""},"parent_line_number":28,"fingerprint":"2096ecc959d8ca2453cd039d6aac3165_0","old_fingerprint":"1943ac52623a47b4d3d79462a5c175d0_33","code_extract":"\t\t$html .= \"\u003cp\u003eWelcome to the password protected area {$user}\u003c/p\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":29,"full_filename":"DVWA/vulnerabilities/brute/source/high.php","filename":"vulnerabilities/brute/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":29,"end":29,"column":{"start":3,"end":39}},"sink":{"start":29,"end":29,"column":{"start":3,"end":8},"content":""},"parent_line_number":29,"fingerprint":"2096ecc959d8ca2453cd039d6aac3165_2","old_fingerprint":"1943ac52623a47b4d3d79462a5c175d0_39","code_extract":"\t\t$html .= \"\u003cimg src=\\\"{$avatar}\\\" /\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":34,"full_filename":"DVWA/vulnerabilities/brute/source/high.php","filename":"vulnerabilities/brute/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":34,"end":34,"column":{"start":3,"end":66}},"sink":{"start":34,"end":34,"column":{"start":3,"end":8},"content":""},"parent_line_number":34,"fingerprint":"2096ecc959d8ca2453cd039d6aac3165_5","old_fingerprint":"1943ac52623a47b4d3d79462a5c175d0_48","code_extract":"\t\t$html .= \"\u003cpre\u003e\u003cbr /\u003eUsername and/or password incorrect.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":67,"full_filename":"DVWA/vulnerabilities/brute/source/impossible.php","filename":"vulnerabilities/brute/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":67,"end":67,"column":{"start":3,"end":76}},"sink":{"start":67,"end":67,"column":{"start":12,"end":76},"content":""},"parent_line_number":67,"fingerprint":"4cfec8f5f4aa09a59efcca0753b3afa3_0","old_fingerprint":"65ba4f07c4ead302fb390f93a858082e_76","code_extract":"\t\t$html .= \"\u003cp\u003eWelcome to the password protected area \u003cem\u003e{$user}\u003c/em\u003e\u003c/p\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":68,"full_filename":"DVWA/vulnerabilities/brute/source/impossible.php","filename":"vulnerabilities/brute/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":3,"end":39}},"sink":{"start":68,"end":68,"column":{"start":3,"end":8},"content":""},"parent_line_number":68,"fingerprint":"4cfec8f5f4aa09a59efcca0753b3afa3_2","old_fingerprint":"65ba4f07c4ead302fb390f93a858082e_79","code_extract":"\t\t$html .= \"\u003cimg src=\\\"{$avatar}\\\" /\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":72,"full_filename":"DVWA/vulnerabilities/brute/source/impossible.php","filename":"vulnerabilities/brute/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":4,"end":89}},"sink":{"start":72,"end":72,"column":{"start":4,"end":89},"content":""},"parent_line_number":72,"fingerprint":"4cfec8f5f4aa09a59efcca0753b3afa3_4","old_fingerprint":"65ba4f07c4ead302fb390f93a858082e_83","code_extract":"\t\t\t$html .= \"\u003cp\u003e\u003cem\u003eWarning\u003c/em\u003e: Someone might of been brute forcing your account.\u003c/p\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":73,"full_filename":"DVWA/vulnerabilities/brute/source/impossible.php","filename":"vulnerabilities/brute/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":73,"end":73,"column":{"start":4,"end":129}},"sink":{"start":73,"end":73,"column":{"start":4,"end":9},"content":""},"parent_line_number":73,"fingerprint":"4cfec8f5f4aa09a59efcca0753b3afa3_6","old_fingerprint":"65ba4f07c4ead302fb390f93a858082e_86","code_extract":"\t\t\t$html .= \"\u003cp\u003eNumber of login attempts: \u003cem\u003e{$failed_login}\u003c/em\u003e.\u003cbr /\u003eLast login attempt was at: \u003cem\u003e{$last_login}\u003c/em\u003e.\u003c/p\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":85,"full_filename":"DVWA/vulnerabilities/brute/source/impossible.php","filename":"vulnerabilities/brute/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":85,"end":85,"column":{"start":3,"end":232}},"sink":{"start":85,"end":85,"column":{"start":3,"end":8},"content":""},"parent_line_number":85,"fingerprint":"4cfec8f5f4aa09a59efcca0753b3afa3_8","old_fingerprint":"65ba4f07c4ead302fb390f93a858082e_96","code_extract":"\t\t$html .= \"\u003cpre\u003e\u003cbr /\u003eUsername and/or password incorrect.\u003cbr /\u003e\u003cbr/\u003eAlternative, the account has been locked because of too many failed logins.\u003cbr /\u003eIf this is the case, \u003cem\u003eplease try again in {$lockout_time} minutes\u003c/em\u003e.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":21,"full_filename":"DVWA/vulnerabilities/brute/source/low.php","filename":"vulnerabilities/brute/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":21,"end":21,"column":{"start":3,"end":67}},"sink":{"start":21,"end":21,"column":{"start":3,"end":67},"content":""},"parent_line_number":21,"fingerprint":"916b64fba6cabd7bc8d123ef4be41e8d_0","old_fingerprint":"de5c33459a2d21cff3f3bf28a8b18bf4_15","code_extract":"\t\t$html .= \"\u003cp\u003eWelcome to the password protected area {$user}\u003c/p\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":22,"full_filename":"DVWA/vulnerabilities/brute/source/low.php","filename":"vulnerabilities/brute/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":22,"end":22,"column":{"start":3,"end":39}},"sink":{"start":22,"end":22,"column":{"start":3,"end":39},"content":""},"parent_line_number":22,"fingerprint":"916b64fba6cabd7bc8d123ef4be41e8d_2","old_fingerprint":"de5c33459a2d21cff3f3bf28a8b18bf4_17","code_extract":"\t\t$html .= \"\u003cimg src=\\\"{$avatar}\\\" /\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":26,"full_filename":"DVWA/vulnerabilities/brute/source/low.php","filename":"vulnerabilities/brute/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":26,"end":26,"column":{"start":3,"end":66}},"sink":{"start":26,"end":26,"column":{"start":3,"end":8},"content":""},"parent_line_number":26,"fingerprint":"916b64fba6cabd7bc8d123ef4be41e8d_5","old_fingerprint":"de5c33459a2d21cff3f3bf28a8b18bf4_26","code_extract":"\t\t$html .= \"\u003cpre\u003e\u003cbr /\u003eUsername and/or password incorrect.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":23,"full_filename":"DVWA/vulnerabilities/brute/source/medium.php","filename":"vulnerabilities/brute/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":23,"end":23,"column":{"start":3,"end":67}},"sink":{"start":23,"end":23,"column":{"start":12,"end":67},"content":""},"parent_line_number":23,"fingerprint":"140c5971c0751cfec9f59adfb6cb0a49_0","old_fingerprint":"4fbacfa00c4d646a6f19623881ea5523_20","code_extract":"\t\t$html .= \"\u003cp\u003eWelcome to the password protected area {$user}\u003c/p\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":24,"full_filename":"DVWA/vulnerabilities/brute/source/medium.php","filename":"vulnerabilities/brute/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":24,"end":24,"column":{"start":3,"end":39}},"sink":{"start":24,"end":24,"column":{"start":3,"end":8},"content":""},"parent_line_number":24,"fingerprint":"140c5971c0751cfec9f59adfb6cb0a49_2","old_fingerprint":"4fbacfa00c4d646a6f19623881ea5523_23","code_extract":"\t\t$html .= \"\u003cimg src=\\\"{$avatar}\\\" /\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":29,"full_filename":"DVWA/vulnerabilities/brute/source/medium.php","filename":"vulnerabilities/brute/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":29,"end":29,"column":{"start":3,"end":66}},"sink":{"start":29,"end":29,"column":{"start":3,"end":66},"content":""},"parent_line_number":29,"fingerprint":"140c5971c0751cfec9f59adfb6cb0a49_5","old_fingerprint":"4fbacfa00c4d646a6f19623881ea5523_42","code_extract":"\t\t$html .= \"\u003cpre\u003e\u003cbr /\u003eUsername and/or password incorrect.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":28,"full_filename":"DVWA/vulnerabilities/captcha/source/low.php","filename":"vulnerabilities/captcha/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":28,"end":35,"column":{"start":4,"end":13}},"sink":{"start":28,"end":35,"column":{"start":4,"end":13},"content":""},"parent_line_number":28,"fingerprint":"a2c985113dc39b78f4c916ebd011a17e_0","old_fingerprint":"4ea9615d7f6c082fb82c66d778946291_31","code_extract":"\t\t\t$html .= \"\n\t\t\t\t\u003cpre\u003e\u003cbr /\u003eYou passed the CAPTCHA! Click the button to confirm your changes.\u003cbr /\u003e\u003c/pre\u003e\n\t\t\t\t\u003cform action=\\\"#\\\" method=\\\"POST\\\"\u003e\n...omitted (buffer value 3)\n\t\t\t\t\t\u003cinput type=\\\"hidden\\\" name=\\\"password_conf\\\" value=\\\"{$pass_conf}\\\" /\u003e\n\t\t\t\t\t\u003cinput type=\\\"submit\\\" name=\\\"Change\\\" value=\\\"Change\\\" /\u003e\n\t\t\t\t\u003c/form\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":39,"full_filename":"DVWA/vulnerabilities/captcha/source/low.php","filename":"vulnerabilities/captcha/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":39,"end":39,"column":{"start":4,"end":56}},"sink":{"start":39,"end":39,"column":{"start":4,"end":56},"content":""},"parent_line_number":39,"fingerprint":"a2c985113dc39b78f4c916ebd011a17e_2","old_fingerprint":"4ea9615d7f6c082fb82c66d778946291_55","code_extract":"\t\t\t$html     .= \"\u003cpre\u003eBoth passwords must match.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":64,"full_filename":"DVWA/vulnerabilities/captcha/source/low.php","filename":"vulnerabilities/captcha/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":64,"end":64,"column":{"start":3,"end":42}},"sink":{"start":64,"end":64,"column":{"start":3,"end":42},"content":""},"parent_line_number":64,"fingerprint":"a2c985113dc39b78f4c916ebd011a17e_4","old_fingerprint":"4ea9615d7f6c082fb82c66d778946291_71","code_extract":"\t\t$html .= \"\u003cpre\u003ePassword Changed.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":68,"full_filename":"DVWA/vulnerabilities/captcha/source/low.php","filename":"vulnerabilities/captcha/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":68,"end":68,"column":{"start":3,"end":49}},"sink":{"start":68,"end":68,"column":{"start":3,"end":49},"content":""},"parent_line_number":68,"fingerprint":"a2c985113dc39b78f4c916ebd011a17e_6","old_fingerprint":"4ea9615d7f6c082fb82c66d778946291_78","code_extract":"\t\t$html .= \"\u003cpre\u003ePasswords did not match.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":28,"full_filename":"DVWA/vulnerabilities/captcha/source/medium.php","filename":"vulnerabilities/captcha/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":28,"end":36,"column":{"start":4,"end":13}},"sink":{"start":28,"end":36,"column":{"start":4,"end":13},"content":""},"parent_line_number":28,"fingerprint":"64d9c35fb10ba850ce006f8ae593f37d_0","old_fingerprint":"c0dc0fbb40bb92a518d1d28222b141f0_36","code_extract":"\t\t\t$html .= \"\n\t\t\t\t\u003cpre\u003e\u003cbr /\u003eYou passed the CAPTCHA! Click the button to confirm your changes.\u003cbr /\u003e\u003c/pre\u003e\n\t\t\t\t\u003cform action=\\\"#\\\" method=\\\"POST\\\"\u003e\n...omitted (buffer value 3)\n\t\t\t\t\t\u003cinput type=\\\"hidden\\\" name=\\\"passed_captcha\\\" value=\\\"true\\\" /\u003e\n\t\t\t\t\t\u003cinput type=\\\"submit\\\" name=\\\"Change\\\" value=\\\"Change\\\" /\u003e\n\t\t\t\t\u003c/form\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":40,"full_filename":"DVWA/vulnerabilities/captcha/source/medium.php","filename":"vulnerabilities/captcha/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":40,"end":40,"column":{"start":4,"end":56}},"sink":{"start":40,"end":40,"column":{"start":4,"end":56},"content":""},"parent_line_number":40,"fingerprint":"64d9c35fb10ba850ce006f8ae593f37d_2","old_fingerprint":"c0dc0fbb40bb92a518d1d28222b141f0_57","code_extract":"\t\t\t$html     .= \"\u003cpre\u003eBoth passwords must match.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":56,"full_filename":"DVWA/vulnerabilities/captcha/source/medium.php","filename":"vulnerabilities/captcha/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":56,"end":56,"column":{"start":3,"end":67}},"sink":{"start":56,"end":56,"column":{"start":3,"end":67},"content":""},"parent_line_number":56,"fingerprint":"64d9c35fb10ba850ce006f8ae593f37d_4","old_fingerprint":"c0dc0fbb40bb92a518d1d28222b141f0_69","code_extract":"\t\t$html     .= \"\u003cpre\u003e\u003cbr /\u003eYou have not passed the CAPTCHA.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":72,"full_filename":"DVWA/vulnerabilities/captcha/source/medium.php","filename":"vulnerabilities/captcha/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":72,"end":72,"column":{"start":3,"end":42}},"sink":{"start":72,"end":72,"column":{"start":3,"end":42},"content":""},"parent_line_number":72,"fingerprint":"64d9c35fb10ba850ce006f8ae593f37d_6","old_fingerprint":"c0dc0fbb40bb92a518d1d28222b141f0_82","code_extract":"\t\t$html .= \"\u003cpre\u003ePassword Changed.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":76,"full_filename":"DVWA/vulnerabilities/captcha/source/medium.php","filename":"vulnerabilities/captcha/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":76,"end":76,"column":{"start":3,"end":49}},"sink":{"start":76,"end":76,"column":{"start":3,"end":8},"content":""},"parent_line_number":76,"fingerprint":"64d9c35fb10ba850ce006f8ae593f37d_8","old_fingerprint":"c0dc0fbb40bb92a518d1d28222b141f0_90","code_extract":"\t\t$html .= \"\u003cpre\u003ePasswords did not match.\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":14,"full_filename":"DVWA/vulnerabilities/csp/source/low.php","filename":"vulnerabilities/csp/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":14,"end":16,"column":{"start":1,"end":2}},"sink":{"start":14,"end":16,"column":{"start":1,"end":2},"content":""},"parent_line_number":14,"fingerprint":"ecbe4039d74c730b831f70d1a37b6a5a_0","old_fingerprint":"bbfa03101797752b717ebc777cb1e35e_7","code_extract":"$page[ 'body' ] .= \"\n\t\u003cscript src='\" . $_POST['include'] . \"'\u003e\u003c/script\u003e\n\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":24,"full_filename":"DVWA/vulnerabilities/csrf/test_credentials.php","filename":"vulnerabilities/csrf/test_credentials.php","category_groups":["PII","Personal Data"],"source":{"start":24,"end":24,"column":{"start":3,"end":80}},"sink":{"start":24,"end":24,"column":{"start":3,"end":80},"content":""},"parent_line_number":24,"fingerprint":"79cfada5968a1846bcd3563668cbd529_0","old_fingerprint":"c490f9dcc39abbdf6c9761c37ceb7237_22","code_extract":"\t\t$login_state = \"\u003ch3 class=\\\"loginSuccess\\\"\u003eValid password for '{$user}'\u003c/h3\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":27,"full_filename":"DVWA/vulnerabilities/csrf/test_credentials.php","filename":"vulnerabilities/csrf/test_credentials.php","category_groups":["PII","Personal Data"],"source":{"start":27,"end":27,"column":{"start":3,"end":77}},"sink":{"start":27,"end":27,"column":{"start":3,"end":77},"content":""},"parent_line_number":27,"fingerprint":"79cfada5968a1846bcd3563668cbd529_1","old_fingerprint":"c490f9dcc39abbdf6c9761c37ceb7237_28","code_extract":"\t\t$login_state = \"\u003ch3 class=\\\"loginFail\\\"\u003eWrong password for '{$user}'\u003c/h3\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":35,"full_filename":"DVWA/vulnerabilities/csrf/test_credentials.php","filename":"vulnerabilities/csrf/test_credentials.php","category_groups":["PII","Personal Data"],"source":{"start":35,"end":50,"column":{"start":1,"end":12}},"sink":{"start":35,"end":50,"column":{"start":20,"end":12},"content":""},"parent_line_number":35,"fingerprint":"79cfada5968a1846bcd3563668cbd529_2","old_fingerprint":"c490f9dcc39abbdf6c9761c37ceb7237_52","code_extract":"$page[ 'body' ] .= \"\n\t\t\u003cdiv class=\\\"body_padded\\\"\u003e\n\t\t\t\u003ch1\u003eTest Credentials\u003c/h1\u003e\n...omitted (buffer value 3)\n\t\t\t\t{$messagesHtml}\n\t\t\t\u003c/div\u003e\n\t\t\u003c/div\u003e\\n\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":42,"full_filename":"DVWA/vulnerabilities/csrf/test_credentials.php","filename":"vulnerabilities/csrf/test_credentials.php","category_groups":["PII","Personal Data"],"source":{"start":42,"end":42,"column":{"start":11,"end":23}},"sink":{"start":42,"end":42,"column":{"start":11,"end":23},"content":""},"parent_line_number":42,"fingerprint":"79cfada5968a1846bcd3563668cbd529_5","old_fingerprint":"c490f9dcc39abbdf6c9761c37ceb7237_59","code_extract":"\t\t\t\t\t\t\" . $login_state . \""},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":34,"full_filename":"DVWA/vulnerabilities/exec/source/high.php","filename":"vulnerabilities/exec/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":34,"end":34,"column":{"start":2,"end":30}},"sink":{"start":34,"end":34,"column":{"start":11,"end":30},"content":""},"parent_line_number":34,"fingerprint":"f93f2f811e979401fadaeefcacf5ffc3_0","old_fingerprint":"96f35e2ae89eb4e7b5bb60f510c1c20e_47","code_extract":"\t$html .= \"\u003cpre\u003e{$cmd}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":30,"full_filename":"DVWA/vulnerabilities/exec/source/impossible.php","filename":"vulnerabilities/exec/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":30,"end":30,"column":{"start":3,"end":31}},"sink":{"start":30,"end":30,"column":{"start":12,"end":31},"content":""},"parent_line_number":30,"fingerprint":"50ff7e5c29fa059ac50dd180c783c674_0","old_fingerprint":"edfa29ee0bd41e7ff0cce34c0d354bb1_44","code_extract":"\t\t$html .= \"\u003cpre\u003e{$cmd}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":34,"full_filename":"DVWA/vulnerabilities/exec/source/impossible.php","filename":"vulnerabilities/exec/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":34,"end":34,"column":{"start":3,"end":63}},"sink":{"start":34,"end":34,"column":{"start":3,"end":63},"content":""},"parent_line_number":34,"fingerprint":"50ff7e5c29fa059ac50dd180c783c674_2","old_fingerprint":"edfa29ee0bd41e7ff0cce34c0d354bb1_46","code_extract":"\t\t$html .= '\u003cpre\u003eERROR: You have entered an invalid IP.\u003c/pre\u003e';"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":18,"full_filename":"DVWA/vulnerabilities/exec/source/low.php","filename":"vulnerabilities/exec/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":18,"end":18,"column":{"start":2,"end":30}},"sink":{"start":18,"end":18,"column":{"start":11,"end":30},"content":""},"parent_line_number":18,"fingerprint":"3b96b60a1fcba410d46e956b88622c20_0","old_fingerprint":"cd2293b5a0f2c1b1e2d8968be88fbf18_9","code_extract":"\t$html .= \"\u003cpre\u003e{$cmd}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":27,"full_filename":"DVWA/vulnerabilities/exec/source/medium.php","filename":"vulnerabilities/exec/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":27,"end":27,"column":{"start":2,"end":30}},"sink":{"start":27,"end":27,"column":{"start":2,"end":30},"content":""},"parent_line_number":27,"fingerprint":"95aa5e80694183b0bcdfc260d26d5705_0","old_fingerprint":"01f61cac0f8447906b0ce11fc752d0be_29","code_extract":"\t$html .= \"\u003cpre\u003e{$cmd}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":28,"full_filename":"DVWA/vulnerabilities/sqli/source/impossible.php","filename":"vulnerabilities/sqli/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":28,"end":28,"column":{"start":6,"end":85}},"sink":{"start":28,"end":28,"column":{"start":15,"end":85},"content":""},"parent_line_number":28,"fingerprint":"2b44a632baf060b3d1060415fbd3b3f8_0","old_fingerprint":"4bc968b493d4fcce678c0be18d559ca4_34","code_extract":"\t\t\t\t\t$html .= \"\u003cpre\u003eID: {$id}\u003cbr /\u003eFirst name: {$first}\u003cbr /\u003eSurname: {$last}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":53,"full_filename":"DVWA/vulnerabilities/sqli/source/impossible.php","filename":"vulnerabilities/sqli/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":53,"end":53,"column":{"start":7,"end":86}},"sink":{"start":53,"end":53,"column":{"start":16,"end":86},"content":""},"parent_line_number":53,"fingerprint":"2b44a632baf060b3d1060415fbd3b3f8_2","old_fingerprint":"4bc968b493d4fcce678c0be18d559ca4_66","code_extract":"\t\t\t\t\t\t$html .= \"\u003cpre\u003eID: {$id}\u003cbr /\u003eFirst name: {$first}\u003cbr /\u003eSurname: {$last}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":20,"full_filename":"DVWA/vulnerabilities/sqli/source/low.php","filename":"vulnerabilities/sqli/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":20,"end":20,"column":{"start":5,"end":84}},"sink":{"start":20,"end":20,"column":{"start":14,"end":84},"content":""},"parent_line_number":20,"fingerprint":"26cbaabf80b25cc22fb6a290600a4690_0","old_fingerprint":"ff035c2cea87322a3487bf553415b4c0_11","code_extract":"\t\t\t\t$html .= \"\u003cpre\u003eID: {$id}\u003cbr /\u003eFirst name: {$first}\u003cbr /\u003eSurname: {$last}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":47,"full_filename":"DVWA/vulnerabilities/sqli/source/low.php","filename":"vulnerabilities/sqli/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":47,"end":47,"column":{"start":6,"end":85}},"sink":{"start":47,"end":47,"column":{"start":15,"end":85},"content":""},"parent_line_number":47,"fingerprint":"26cbaabf80b25cc22fb6a290600a4690_2","old_fingerprint":"ff035c2cea87322a3487bf553415b4c0_63","code_extract":"\t\t\t\t\t$html .= \"\u003cpre\u003eID: {$id}\u003cbr /\u003eFirst name: {$first}\u003cbr /\u003eSurname: {$last}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":21,"full_filename":"DVWA/vulnerabilities/sqli/source/medium.php","filename":"vulnerabilities/sqli/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":21,"end":21,"column":{"start":5,"end":84}},"sink":{"start":21,"end":21,"column":{"start":14,"end":84},"content":""},"parent_line_number":21,"fingerprint":"dd911ebe71113c6d582364ab3c917e37_0","old_fingerprint":"324fb76e4d1ac1608f2b0ca4d0f32daa_13","code_extract":"\t\t\t\t$html .= \"\u003cpre\u003eID: {$id}\u003cbr /\u003eFirst name: {$first}\u003cbr /\u003eSurname: {$last}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":43,"full_filename":"DVWA/vulnerabilities/sqli/source/medium.php","filename":"vulnerabilities/sqli/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":43,"end":43,"column":{"start":6,"end":85}},"sink":{"start":43,"end":43,"column":{"start":15,"end":85},"content":""},"parent_line_number":43,"fingerprint":"dd911ebe71113c6d582364ab3c917e37_2","old_fingerprint":"324fb76e4d1ac1608f2b0ca4d0f32daa_60","code_extract":"\t\t\t\t\t$html .= \"\u003cpre\u003eID: {$id}\u003cbr /\u003eFirst name: {$first}\u003cbr /\u003eSurname: {$last}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":66,"full_filename":"DVWA/vulnerabilities/view_source.php","filename":"vulnerabilities/view_source.php","category_groups":["PII","Personal Data"],"source":{"start":66,"end":75,"column":{"start":3,"end":4}},"sink":{"start":66,"end":71,"column":{"start":14,"end":67},"content":""},"parent_line_number":66,"fingerprint":"80bd36ae180806449f2af0679da68954_0","old_fingerprint":"2ce79aa84e131bc74345cc292f12c57a_73","code_extract":"\t\t$js_html = \"\n\t\t\u003ch2\u003evulnerabilities/{$id}/source/{$security}.js\u003c/h2\u003e\n\t\t\u003cdiv id=\\\"code\\\"\u003e\n...omitted (buffer value 3)"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":78,"full_filename":"DVWA/vulnerabilities/view_source.php","filename":"vulnerabilities/view_source.php","category_groups":["PII","Personal Data"],"source":{"start":78,"end":96,"column":{"start":2,"end":11}},"sink":{"start":78,"end":96,"column":{"start":2,"end":11},"content":""},"parent_line_number":78,"fingerprint":"80bd36ae180806449f2af0679da68954_3","old_fingerprint":"2ce79aa84e131bc74345cc292f12c57a_92","code_extract":"\t$page[ 'body' ] .= \"\n\t\u003cdiv class=\\\"body_padded\\\"\u003e\n\t\t\u003ch1\u003e{$vuln} Source\u003c/h1\u003e\n...omitted (buffer value 3)\n\t\t\t\u003cinput type=\\\"button\\\" value=\\\"Compare All Levels\\\" onclick=\\\"window.location.href='view_source_all.php?id=$id'\\\"\u003e\n\t\t\u003c/form\u003e\n\t\u003c/div\u003e\\n\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":86,"full_filename":"DVWA/vulnerabilities/view_source.php","filename":"vulnerabilities/view_source.php","category_groups":["PII","Personal Data"],"source":{"start":86,"end":96,"column":{"start":67,"end":11}},"sink":{"start":86,"end":96,"column":{"start":67,"end":11},"content":""},"parent_line_number":86,"fingerprint":"80bd36ae180806449f2af0679da68954_7","old_fingerprint":"2ce79aa84e131bc74345cc292f12c57a_98","code_extract":"\t\t\t\t\t\u003ctd\u003e\u003cdiv id=\\\"code\\\"\u003e\" . highlight_string( $source, true ) . \"\u003c/div\u003e\u003c/td\u003e\n\t\t\t\t\u003c/tr\u003e\n\t\t\t\u003c/table\u003e\n...omitted (buffer value 3)\n\t\t\t\u003cinput type=\\\"button\\\" value=\\\"Compare All Levels\\\" onclick=\\\"window.location.href='view_source_all.php?id=$id'\\\"\u003e\n\t\t\u003c/form\u003e\n\t\u003c/div\u003e\\n\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":90,"full_filename":"DVWA/vulnerabilities/view_source.php","filename":"vulnerabilities/view_source.php","category_groups":["PII","Personal Data"],"source":{"start":90,"end":90,"column":{"start":4,"end":12}},"sink":{"start":90,"end":90,"column":{"start":4,"end":12},"content":""},"parent_line_number":90,"fingerprint":"80bd36ae180806449f2af0679da68954_8","old_fingerprint":"2ce79aa84e131bc74345cc292f12c57a_99","code_extract":"\t\t{$js_html}"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":74,"full_filename":"DVWA/vulnerabilities/view_source_all.php","filename":"vulnerabilities/view_source_all.php","category_groups":["PII","Personal Data"],"source":{"start":74,"end":115,"column":{"start":2,"end":11}},"sink":{"start":74,"end":115,"column":{"start":21,"end":11},"content":""},"parent_line_number":74,"fingerprint":"d5a0f702298c83c1805a23ee4b642962_0","old_fingerprint":"1ef2150bf2da66303b962968c2615efa_88","code_extract":"\t$page[ 'body' ] .= \"\n\t\u003cdiv class=\\\"body_padded\\\"\u003e\n\t\t\u003ch1\u003e{$vuln}\u003c/h1\u003e\n...omitted (buffer value 3)\n\t\t\u003c/form\u003e\n\n\t\u003c/div\u003e\\n\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":11,"full_filename":"DVWA/vulnerabilities/xss_r/source/high.php","filename":"vulnerabilities/xss_r/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":2,"end":37}},"sink":{"start":11,"end":11,"column":{"start":2,"end":37},"content":""},"parent_line_number":11,"fingerprint":"6d0b83e5fc172941621229d14a5bae73_0","old_fingerprint":"92b50e45dc0824f18a052f288db4d3d9_3","code_extract":"\t$html .= \"\u003cpre\u003eHello {$name}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":8,"full_filename":"DVWA/vulnerabilities/xss_r/source/low.php","filename":"vulnerabilities/xss_r/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":8,"end":8,"column":{"start":2,"end":53}},"sink":{"start":8,"end":8,"column":{"start":11,"end":53},"content":""},"parent_line_number":8,"fingerprint":"45e0c57740dd9704185115149558c75e_0","old_fingerprint":"a2bca67ecff215714e96af4a6c0f0b15_0","code_extract":"\t$html .= '\u003cpre\u003eHello ' . $_GET[ 'name' ] . '\u003c/pre\u003e';"},{"cwe_ids":["79"],"id":"php_lang_raw_html_using_user_input","title":"Unsanitized user input in raw HTML strings (XSS)","description":"## Description\n\nIncluding unsanitized user input in HTML exposes your application to cross-site scripting (XSS) attacks. This vulnerability allows attackers to inject malicious scripts into web pages viewed by other users.\n\n## Remediations\n\n- **Do not** include user input directly in HTML strings. This practice can lead to XSS vulnerabilities.\n  ```php\n  $html = \"\u003ch1\u003e{$_GET[\"title\"]}\u003c/h1\u003e\"; // unsafe\n  ```\n- **Do** use a templating language like Twig, and keep the template in a separate file. Templating languages automatically handle input sanitization, reducing the risk of XSS.\n- **Do** sanitize user input when HTML strings must be used, to prevent malicious code injection.\n  ```php\n  $html = \"\u003ch1\u003e${htmlspecialchars($_GET[\"title\"])}\u003c/h1\u003e\";\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_html_using_user_input","line_number":11,"full_filename":"DVWA/vulnerabilities/xss_r/source/medium.php","filename":"vulnerabilities/xss_r/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":2,"end":37}},"sink":{"start":11,"end":11,"column":{"start":11,"end":37},"content":""},"parent_line_number":11,"fingerprint":"bf259bdda12d064e4862dac6012c5b0f_0","old_fingerprint":"ef91393231edacc92dbe2dca944cecd7_4","code_extract":"\t$html .= \"\u003cpre\u003eHello {$name}\u003c/pre\u003e\";"},{"cwe_ids":["79"],"id":"php_lang_raw_output_using_user_input","title":"Unsanitized user input in 'echo' function (XSS)","description":"## Description\n\nIncluding unsanitized user input in responses can lead to cross-site scripting (XSS) attacks. This vulnerability exposes your application to malicious scripts injected by attackers, compromising user data and browser security.\n\n## Remediations\n\n- **Do not** include user input directly in the response. This practice can make your application vulnerable to XSS attacks.\n  ```php\n  echo \"\u003ch1\u003e\" . $_GET[\"title\"] . \"\u003c/h1\u003e\" // unsafe\n  ```\n- **Do** sanitize user input before including it in a response. This step helps prevent malicious code from being executed.\n  ```php\n  echo \"\u003ch1\u003e\" . filter_var($_GET[\"title\"], FILTER_SANITIZE_STRING). \"\u003c/h1\u003e\"\n  ```\n\n## References\n\n- [OWASP Cross-Site Scripting (XSS) Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_raw_output_using_user_input","line_number":12,"full_filename":"DVWA/vulnerabilities/csp/source/jsonp.php","filename":"vulnerabilities/csp/source/jsonp.php","category_groups":["PII","Personal Data"],"source":{"start":12,"end":12,"column":{"start":1,"end":45}},"sink":{"start":12,"end":12,"column":{"start":1,"end":45},"content":""},"parent_line_number":12,"fingerprint":"6d392b956b9870067e786661cf587f8b_0","old_fingerprint":"be64f688adabcf691ed2b2cb6862e5d5_0","code_extract":"echo $callback . \"(\".json_encode($outp).\")\";"}],"low":[{"cwe_ids":["209"],"id":"php_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```php\n  echo $e-\u003egetTrace(); // unsafe\n  ```\n- **Do** log only the essential details required for error messages. This minimizes the risk of sensitive data exposure.\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_information_leakage","line_number":33,"full_filename":"DVWA/vulnerabilities/sqli/source/high.php","filename":"vulnerabilities/sqli/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":33,"end":33,"column":{"start":5,"end":50}},"sink":{"start":33,"end":33,"column":{"start":5,"end":50},"content":""},"parent_line_number":33,"fingerprint":"b6795ad506aa5815b91f6fe107ab5dd5_0","old_fingerprint":"72b48d344ac616da369602c86eac5fab_1","code_extract":"\t\t\t\techo 'Caught exception: ' . $e-\u003egetMessage();"},{"cwe_ids":["209"],"id":"php_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```php\n  echo $e-\u003egetTrace(); // unsafe\n  ```\n- **Do** log only the essential details required for error messages. This minimizes the risk of sensitive data exposure.\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_information_leakage","line_number":36,"full_filename":"DVWA/vulnerabilities/sqli/source/low.php","filename":"vulnerabilities/sqli/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":36,"end":36,"column":{"start":5,"end":50}},"sink":{"start":36,"end":36,"column":{"start":5,"end":50},"content":""},"parent_line_number":36,"fingerprint":"33829b9b23f96fa7a35298788d77cb5f_0","old_fingerprint":"aca51ea88dde7fc37d14fd35e01602af_2","code_extract":"\t\t\t\techo 'Caught exception: ' . $e-\u003egetMessage();"},{"cwe_ids":["209"],"id":"php_lang_information_leakage","title":"Leakage of sensitive information in exception message","description":"## Description\n\nLeakage of sensitive information in exception messages poses a significant security risk. When an exception message is printed to the default output, it might reveal sensitive details about your application's technical setup or environment. This could potentially open the door to attacks, such as path traversal. Even more concerning is the possibility of exposing user-specific data, which could lead to serious privacy breaches.\n\n## Remediations\n\n- **Do not** print the full stack trace to the default output. This can inadvertently reveal sensitive information.\n  ```php\n  echo $e-\u003egetTrace(); // unsafe\n  ```\n- **Do** log only the essential details required for error messages. This minimizes the risk of sensitive data exposure.\n\n## References\n\n- [Web Application Security Consortium: Information Leakage](http://projects.webappsec.org/w/page/13246936/Information%20Leakage)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_information_leakage","line_number":32,"full_filename":"DVWA/vulnerabilities/sqli/source/medium.php","filename":"vulnerabilities/sqli/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":32,"end":32,"column":{"start":5,"end":50}},"sink":{"start":32,"end":32,"column":{"start":5,"end":50},"content":""},"parent_line_number":32,"fingerprint":"d0be11025d7caf78ab3a622582bef8c1_0","old_fingerprint":"3f98d42bbc64f23c489d2255209e8c71_0","code_extract":"\t\t\t\techo 'Caught exception: ' . $e-\u003egetMessage();"}],"medium":[{"cwe_ids":["1004"],"id":"php_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the \"httponly\" attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling \"httponly\" is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the `httponly` attribute to `true` in your cookie configurations. This action prevents client-side scripts from sending or accessing the cookie, enhancing your application's security against XSS attacks.\n  ```php\n  setcookie(\"name\", \"value\", httponly: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_cookie_missing_http_only","line_number":219,"full_filename":"DVWA/dvwa/includes/dvwaPage.inc.php","filename":"dvwa/includes/dvwaPage.inc.php","category_groups":["PII","Personal Data"],"source":{"start":219,"end":219,"column":{"start":2,"end":72}},"sink":{"start":219,"end":219,"column":{"start":2,"end":72},"content":""},"parent_line_number":219,"fingerprint":"e2cb35cd40705ecc6f0e83ac08e4bdad_0","old_fingerprint":"ea057faa8f226a3f9ff7f6bbd0db9009_4","code_extract":"\tsetcookie( 'security', $pSecurityLevel, 0, \"/\", \"\", false, $httponly );"},{"cwe_ids":["1004"],"id":"php_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the \"httponly\" attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling \"httponly\" is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the `httponly` attribute to `true` in your cookie configurations. This action prevents client-side scripts from sending or accessing the cookie, enhancing your application's security against XSS attacks.\n  ```php\n  setcookie(\"name\", \"value\", httponly: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_cookie_missing_http_only","line_number":12,"full_filename":"DVWA/vulnerabilities/sqli_blind/cookie-input.php","filename":"vulnerabilities/sqli_blind/cookie-input.php","category_groups":["PII","Personal Data"],"source":{"start":12,"end":12,"column":{"start":2,"end":34}},"sink":{"start":12,"end":12,"column":{"start":2,"end":34},"content":""},"parent_line_number":12,"fingerprint":"f9fba14c6df6c7a548d66033bf445cdf_0","old_fingerprint":"a1ca590e50e6cb08d85af502453ec712_3","code_extract":"\tsetcookie( 'id', $_POST[ 'id' ]);"},{"cwe_ids":["1004"],"id":"php_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the \"httponly\" attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling \"httponly\" is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the `httponly` attribute to `true` in your cookie configurations. This action prevents client-side scripts from sending or accessing the cookie, enhancing your application's security against XSS attacks.\n  ```php\n  setcookie(\"name\", \"value\", httponly: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_cookie_missing_http_only","line_number":11,"full_filename":"DVWA/vulnerabilities/weak_id/source/high.php","filename":"vulnerabilities/weak_id/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":2,"end":120}},"sink":{"start":11,"end":11,"column":{"start":2,"end":120},"content":""},"parent_line_number":11,"fingerprint":"dea8f67721f02714fd8ff6d2be0bd9f8_0","old_fingerprint":"d6c348358925ff99d9a0f3f6345a33da_1","code_extract":"\tsetcookie(\"dvwaSession\", $cookie_value, time()+3600, \"/vulnerabilities/weak_id/\", $_SERVER['HTTP_HOST'], false, false);"},{"cwe_ids":["1004"],"id":"php_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the \"httponly\" attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling \"httponly\" is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the `httponly` attribute to `true` in your cookie configurations. This action prevents client-side scripts from sending or accessing the cookie, enhancing your application's security against XSS attacks.\n  ```php\n  setcookie(\"name\", \"value\", httponly: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_cookie_missing_http_only","line_number":11,"full_filename":"DVWA/vulnerabilities/weak_id/source/low.php","filename":"vulnerabilities/weak_id/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":2,"end":41}},"sink":{"start":11,"end":11,"column":{"start":2,"end":41},"content":""},"parent_line_number":11,"fingerprint":"9f66303910f4e495b3a0b616b89cd3d7_0","old_fingerprint":"bb03638bed3ee3e842fcd3b66e173262_2","code_extract":"\tsetcookie(\"dvwaSession\", $cookie_value);"},{"cwe_ids":["1004"],"id":"php_lang_cookie_missing_http_only","title":"Missing HTTP Only option in cookie configuration","description":"## Description\n\nNot setting the \"httponly\" attribute to \"true\" in cookie configurations leaves the cookie vulnerable to being accessed by client-side JavaScript. This oversight can lead to the exposure of cookie values, especially on websites susceptible to Cross-Site Scripting (XSS) attacks. Enabling \"httponly\" is a critical step in preventing malicious scripts from reading the cookie values through JavaScript.\n\n## Remediations\n\n- **Do** set the `httponly` attribute to `true` in your cookie configurations. This action prevents client-side scripts from sending or accessing the cookie, enhancing your application's security against XSS attacks.\n  ```php\n  setcookie(\"name\", \"value\", httponly: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_cookie_missing_http_only","line_number":7,"full_filename":"DVWA/vulnerabilities/weak_id/source/medium.php","filename":"vulnerabilities/weak_id/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":7,"end":7,"column":{"start":2,"end":41}},"sink":{"start":7,"end":7,"column":{"start":2,"end":41},"content":""},"parent_line_number":7,"fingerprint":"f4364423f97391e2356a7e5e958380f9_0","old_fingerprint":"8554075680c464a83788979736f9ce07_0","code_extract":"\tsetcookie(\"dvwaSession\", $cookie_value);"},{"cwe_ids":["614"],"id":"php_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure attribute is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` attribute to `true` for cookies to ensure they are only sent over HTTPS.\n  ```php\n  setcookie(\"name\", \"value\", secure: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_insecure_cookie","line_number":219,"full_filename":"DVWA/dvwa/includes/dvwaPage.inc.php","filename":"dvwa/includes/dvwaPage.inc.php","category_groups":["PII","Personal Data"],"source":{"start":219,"end":219,"column":{"start":2,"end":72}},"sink":{"start":219,"end":219,"column":{"start":2,"end":72},"content":""},"parent_line_number":219,"fingerprint":"da2c4cf51ef5e24dc0a5802ab06302c3_0","old_fingerprint":"2a2d5dc7b8ee5c1648ce61cabde53eb0_4","code_extract":"\tsetcookie( 'security', $pSecurityLevel, 0, \"/\", \"\", false, $httponly );"},{"cwe_ids":["614"],"id":"php_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure attribute is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` attribute to `true` for cookies to ensure they are only sent over HTTPS.\n  ```php\n  setcookie(\"name\", \"value\", secure: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_insecure_cookie","line_number":12,"full_filename":"DVWA/vulnerabilities/sqli_blind/cookie-input.php","filename":"vulnerabilities/sqli_blind/cookie-input.php","category_groups":["PII","Personal Data"],"source":{"start":12,"end":12,"column":{"start":2,"end":34}},"sink":{"start":12,"end":12,"column":{"start":2,"end":34},"content":""},"parent_line_number":12,"fingerprint":"84bc0d86e292e81382bf336bd0607f48_0","old_fingerprint":"0537ce5254f90d0e22430b58c1e40838_3","code_extract":"\tsetcookie( 'id', $_POST[ 'id' ]);"},{"cwe_ids":["614"],"id":"php_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure attribute is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` attribute to `true` for cookies to ensure they are only sent over HTTPS.\n  ```php\n  setcookie(\"name\", \"value\", secure: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_insecure_cookie","line_number":11,"full_filename":"DVWA/vulnerabilities/weak_id/source/high.php","filename":"vulnerabilities/weak_id/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":2,"end":120}},"sink":{"start":11,"end":11,"column":{"start":2,"end":120},"content":""},"parent_line_number":11,"fingerprint":"4209df5bf5f64047633515cd40804d97_0","old_fingerprint":"584b0f52a36ca337dd8d1d581404c813_1","code_extract":"\tsetcookie(\"dvwaSession\", $cookie_value, time()+3600, \"/vulnerabilities/weak_id/\", $_SERVER['HTTP_HOST'], false, false);"},{"cwe_ids":["614"],"id":"php_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure attribute is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` attribute to `true` for cookies to ensure they are only sent over HTTPS.\n  ```php\n  setcookie(\"name\", \"value\", secure: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_insecure_cookie","line_number":11,"full_filename":"DVWA/vulnerabilities/weak_id/source/low.php","filename":"vulnerabilities/weak_id/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":2,"end":41}},"sink":{"start":11,"end":11,"column":{"start":2,"end":41},"content":""},"parent_line_number":11,"fingerprint":"238f26a6cb46fb7a8c16e401b56a9990_0","old_fingerprint":"7bc03474dbc3791992c6c2e8214fce23_2","code_extract":"\tsetcookie(\"dvwaSession\", $cookie_value);"},{"cwe_ids":["614"],"id":"php_lang_insecure_cookie","title":"Missing Secure option in cookie configuration","description":"## Description\n\nWhen a cookie lacks the Secure attribute, it can be transmitted over insecure connections, making it vulnerable to interception by unauthorized parties. The Secure attribute is important because it instructs the browser to only send the cookie over HTTPS, enhancing security.\n\n## Remediations\n\n- **Do** set the `Secure` attribute to `true` for cookies to ensure they are only sent over HTTPS.\n  ```php\n  setcookie(\"name\", \"value\", secure: true);\n  ```\n\n## References\n\n- [OWASP Session Management Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)\n- [OWASP Cookies Properties](https://owasp.org/www-community/controls/SecureCookieAttribute)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_insecure_cookie","line_number":7,"full_filename":"DVWA/vulnerabilities/weak_id/source/medium.php","filename":"vulnerabilities/weak_id/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":7,"end":7,"column":{"start":2,"end":41}},"sink":{"start":7,"end":7,"column":{"start":2,"end":41},"content":""},"parent_line_number":7,"fingerprint":"7f5e3b9d63647b943179df054fd518be_0","old_fingerprint":"80bb3e94a1ee0013ea2cd335ef47b352_0","code_extract":"\tsetcookie(\"dvwaSession\", $cookie_value);"},{"cwe_ids":["601"],"id":"php_lang_open_redirect","title":"Unsanitized user input in redirect","description":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n  ```php\n  $paths = [\n    \"1\" =\u003e \"/planes\",\n    \"2\" =\u003e \"/trains\",\n    \"3\" =\u003e \"/automobiles\",\n  ];\n\n  $transport = $_GET[\"transport\"];\n  header(\"Location: {$paths[$transport]}\", true, 301);\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_open_redirect","line_number":5,"full_filename":"DVWA/vulnerabilities/open_redirect/source/high.php","filename":"vulnerabilities/open_redirect/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":5,"end":5,"column":{"start":3,"end":44}},"sink":{"start":5,"end":5,"column":{"start":3,"end":44},"content":""},"parent_line_number":5,"fingerprint":"0ff43bb8dcfc09517e7e03373e776734_0","old_fingerprint":"92ef151f8a2365ca16e5fd072402042b_1","code_extract":"\t\theader (\"location: \" . $_GET['redirect']);"},{"cwe_ids":["601"],"id":"php_lang_open_redirect","title":"Unsanitized user input in redirect","description":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n  ```php\n  $paths = [\n    \"1\" =\u003e \"/planes\",\n    \"2\" =\u003e \"/trains\",\n    \"3\" =\u003e \"/automobiles\",\n  ];\n\n  $transport = $_GET[\"transport\"];\n  header(\"Location: {$paths[$transport]}\", true, 301);\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_open_redirect","line_number":4,"full_filename":"DVWA/vulnerabilities/open_redirect/source/low.php","filename":"vulnerabilities/open_redirect/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":4,"end":4,"column":{"start":2,"end":43}},"sink":{"start":4,"end":4,"column":{"start":2,"end":43},"content":""},"parent_line_number":4,"fingerprint":"97dd1fb4b2aef5d1e08fe336019ddbce_0","old_fingerprint":"851f2da97f6eb9f4cb5cc7ae5f278c31_0","code_extract":"\theader (\"location: \" . $_GET['redirect']);"},{"cwe_ids":["601"],"id":"php_lang_open_redirect","title":"Unsanitized user input in redirect","description":"## Description\n\nUsing unsanitized user input to perform redirects can make your application vulnerable to phishing attacks. This occurs when user input is directly used to determine the destination of a redirect without proper validation or sanitization, allowing attackers to redirect users to malicious sites, potentially compromising their security.\n\n## Remediations\n\n- **Do not** use unsanitized user input when constructing URLs for redirects. Directly incorporating user input without validation can lead to phishing attacks and malicious site redirection.\n- **Do** validate user input by employing a safe list or a mapping strategy for constructing URLs. This ensures that the redirection is to a known, safe location.\n  ```php\n  $paths = [\n    \"1\" =\u003e \"/planes\",\n    \"2\" =\u003e \"/trains\",\n    \"3\" =\u003e \"/automobiles\",\n  ];\n\n  $transport = $_GET[\"transport\"];\n  header(\"Location: {$paths[$transport]}\", true, 301);\n  ```\n\n## References\n\n- [OWASP Unvalidated Redirects and Forwards Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html)","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_open_redirect","line_number":11,"full_filename":"DVWA/vulnerabilities/open_redirect/source/medium.php","filename":"vulnerabilities/open_redirect/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":3,"end":44}},"sink":{"start":11,"end":11,"column":{"start":3,"end":44},"content":""},"parent_line_number":11,"fingerprint":"a2dfe5d8793c6058424107de68e54455_0","old_fingerprint":"add475b7c83959ac29ffc304cf2e36dd_2","code_extract":"\t\theader (\"location: \" . $_GET['redirect']);"},{"cwe_ids":["200"],"id":"php_lang_phpinfo","title":"Leakage of sensitive information with 'phpinfo' function","description":"## Description\n\nThe use of the 'phpinfo()' function can lead to the leakage of sensitive information. This function outputs a large amount of information about the current state of PHP, including environment variables, server information, and PHP configuration settings, which could be exploited by unauthorized individuals.\n\n## Remediations\n\n- **Do not** use the 'phpinfo()' function in production environments or publicly accessible areas of your application. This function can inadvertently expose critical information that could aid an attacker.\n  ```php\n  phpinfo(); // unsafe in production\n  ```\n- **Do** regularly review your codebase to ensure that calls to 'phpinfo()' are removed before deploying to production. Consider using environment-specific configuration to automatically exclude such calls in production environments.","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_phpinfo","line_number":8,"full_filename":"DVWA/phpinfo.php","filename":"phpinfo.php","category_groups":["PII","Personal Data"],"source":{"start":8,"end":8,"column":{"start":1,"end":10}},"sink":{"start":8,"end":8,"column":{"start":1,"end":10},"content":""},"parent_line_number":8,"fingerprint":"3fa4b1322bb9445eaf6e195e0f055452_0","old_fingerprint":"98f7c5516c916f38de28d026aefbb609_0","code_extract":"phpinfo();"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":639,"full_filename":"DVWA/dvwa/includes/dvwaPage.inc.php","filename":"dvwa/includes/dvwaPage.inc.php","category_groups":["PII","Personal Data"],"source":{"start":639,"end":639,"column":{"start":33,"end":48}},"sink":{"start":639,"end":639,"column":{"start":33,"end":48},"content":""},"parent_line_number":639,"fingerprint":"63a689cb5ac980a1265d3657ca99ab54_0","old_fingerprint":"d36eccf09ed8faa6e673be14228e7798_21","code_extract":"\t$_SESSION[ 'session_token' ] = md5( uniqid() );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":27,"full_filename":"DVWA/login.php","filename":"login.php","category_groups":["PII","Personal Data"],"source":{"start":27,"end":27,"column":{"start":10,"end":22}},"sink":{"start":27,"end":27,"column":{"start":10,"end":22},"content":""},"parent_line_number":27,"fingerprint":"e75c3db34ecb83d3888dc9fce879f054_0","old_fingerprint":"ac4344fc431b7bef6a142e754109a7d4_15","code_extract":"\t$pass = md5( $pass );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":16,"full_filename":"DVWA/vulnerabilities/brute/source/high.php","filename":"vulnerabilities/brute/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":16,"end":16,"column":{"start":10,"end":22}},"sink":{"start":16,"end":16,"column":{"start":10,"end":22},"content":""},"parent_line_number":16,"fingerprint":"92264ec9230849fec19b1d4df3a3619b_0","old_fingerprint":"636a1cfee81ce7f7cad63065705b4231_7","code_extract":"\t$pass = md5( $pass );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":16,"full_filename":"DVWA/vulnerabilities/brute/source/impossible.php","filename":"vulnerabilities/brute/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":16,"end":16,"column":{"start":10,"end":22}},"sink":{"start":16,"end":16,"column":{"start":10,"end":22},"content":""},"parent_line_number":16,"fingerprint":"c3ab2d6c79038a42be6d868af212fc86_0","old_fingerprint":"a7a7c6f34e0a023dadaaee499edc1573_8","code_extract":"\t$pass = md5( $pass );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":9,"full_filename":"DVWA/vulnerabilities/brute/source/low.php","filename":"vulnerabilities/brute/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":9,"end":9,"column":{"start":10,"end":22}},"sink":{"start":9,"end":9,"column":{"start":10,"end":22},"content":""},"parent_line_number":9,"fingerprint":"370f9b40c6da9811cc2795ed0eae12bf_0","old_fingerprint":"c4f752513e493785148d5d4ae42caedc_0","code_extract":"\t$pass = md5( $pass );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":11,"full_filename":"DVWA/vulnerabilities/brute/source/medium.php","filename":"vulnerabilities/brute/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":11,"end":11,"column":{"start":10,"end":22}},"sink":{"start":11,"end":11,"column":{"start":10,"end":22},"content":""},"parent_line_number":11,"fingerprint":"fc89804269b6e37ecd14fc7f0a9f2600_0","old_fingerprint":"deeceef22d16b014608b298ca6d85bff_2","code_extract":"\t$pass = md5( $pass );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":27,"full_filename":"DVWA/vulnerabilities/captcha/source/high.php","filename":"vulnerabilities/captcha/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":27,"end":27,"column":{"start":16,"end":32}},"sink":{"start":27,"end":27,"column":{"start":16,"end":32},"content":""},"parent_line_number":27,"fingerprint":"60aa7adbbe5f581b9f84c29a13888bd6_0","old_fingerprint":"f3ffa12b036b4d843837007073f9070b_14","code_extract":"\t\t\t$pass_new = md5( $pass_new );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":14,"full_filename":"DVWA/vulnerabilities/captcha/source/impossible.php","filename":"vulnerabilities/captcha/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":15,"end":31}},"sink":{"start":14,"end":14,"column":{"start":15,"end":31},"content":""},"parent_line_number":14,"fingerprint":"e88d9caa88daf8553fefcd20c98dae1a_0","old_fingerprint":"8494383d228a27d92d423437805f5548_4","code_extract":"\t$pass_new  = md5( $pass_new );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":19,"full_filename":"DVWA/vulnerabilities/captcha/source/impossible.php","filename":"vulnerabilities/captcha/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":19,"end":19,"column":{"start":15,"end":32}},"sink":{"start":19,"end":19,"column":{"start":15,"end":32},"content":""},"parent_line_number":19,"fingerprint":"e88d9caa88daf8553fefcd20c98dae1a_1","old_fingerprint":"8494383d228a27d92d423437805f5548_10","code_extract":"\t$pass_conf = md5( $pass_conf );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":24,"full_filename":"DVWA/vulnerabilities/captcha/source/impossible.php","filename":"vulnerabilities/captcha/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":24,"end":24,"column":{"start":15,"end":32}},"sink":{"start":24,"end":24,"column":{"start":15,"end":32},"content":""},"parent_line_number":24,"fingerprint":"e88d9caa88daf8553fefcd20c98dae1a_2","old_fingerprint":"8494383d228a27d92d423437805f5548_13","code_extract":"\t$pass_curr = md5( $pass_curr );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":57,"full_filename":"DVWA/vulnerabilities/captcha/source/low.php","filename":"vulnerabilities/captcha/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":57,"end":57,"column":{"start":15,"end":31}},"sink":{"start":57,"end":57,"column":{"start":15,"end":31},"content":""},"parent_line_number":57,"fingerprint":"945b1e912e01bf5eb0f4c46f5f12e914_0","old_fingerprint":"2e76ff88ac6629b2bf972d99704bcb3b_19","code_extract":"\t\t$pass_new = md5( $pass_new );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":65,"full_filename":"DVWA/vulnerabilities/captcha/source/medium.php","filename":"vulnerabilities/captcha/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":65,"end":65,"column":{"start":15,"end":31}},"sink":{"start":65,"end":65,"column":{"start":15,"end":31},"content":""},"parent_line_number":65,"fingerprint":"4ee94a92f33e55a07a006ec6a679a346_0","old_fingerprint":"3095dc8989f9796eff355d551f26e096_20","code_extract":"\t\t$pass_new = md5( $pass_new );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":39,"full_filename":"DVWA/vulnerabilities/csrf/source/high.php","filename":"vulnerabilities/csrf/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":39,"end":39,"column":{"start":15,"end":31}},"sink":{"start":39,"end":39,"column":{"start":15,"end":31},"content":""},"parent_line_number":39,"fingerprint":"897291e17ed11e87cafa1a2e90fb75f4_0","old_fingerprint":"96882dd1aa6da644c60ec97285d34be2_17","code_extract":"\t\t$pass_new = md5( $pass_new );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":15,"full_filename":"DVWA/vulnerabilities/csrf/source/impossible.php","filename":"vulnerabilities/csrf/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":15,"end":15,"column":{"start":15,"end":32}},"sink":{"start":15,"end":15,"column":{"start":15,"end":32},"content":""},"parent_line_number":15,"fingerprint":"80f6c0e9abd56f759909cea27c061099_0","old_fingerprint":"73f8e8517110f55495634ce8aae5fe86_6","code_extract":"\t$pass_curr = md5( $pass_curr );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":29,"full_filename":"DVWA/vulnerabilities/csrf/source/impossible.php","filename":"vulnerabilities/csrf/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":29,"end":29,"column":{"start":15,"end":31}},"sink":{"start":29,"end":29,"column":{"start":15,"end":31},"content":""},"parent_line_number":29,"fingerprint":"80f6c0e9abd56f759909cea27c061099_1","old_fingerprint":"73f8e8517110f55495634ce8aae5fe86_16","code_extract":"\t\t$pass_new = md5( $pass_new );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":12,"full_filename":"DVWA/vulnerabilities/csrf/source/low.php","filename":"vulnerabilities/csrf/source/low.php","category_groups":["PII","Personal Data"],"source":{"start":12,"end":12,"column":{"start":15,"end":31}},"sink":{"start":12,"end":12,"column":{"start":15,"end":31},"content":""},"parent_line_number":12,"fingerprint":"ed7e2cd5fa7bcbfdb36001cb95ea6dfe_0","old_fingerprint":"50ae4bff4019a2b3c982baf12781e042_3","code_extract":"\t\t$pass_new = md5( $pass_new );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":14,"full_filename":"DVWA/vulnerabilities/csrf/source/medium.php","filename":"vulnerabilities/csrf/source/medium.php","category_groups":["PII","Personal Data"],"source":{"start":14,"end":14,"column":{"start":16,"end":32}},"sink":{"start":14,"end":14,"column":{"start":16,"end":32},"content":""},"parent_line_number":14,"fingerprint":"549029ee18127f631c8f41e4081af72f_0","old_fingerprint":"9cba196847aca52b94cacdc10f6ce81f_5","code_extract":"\t\t\t$pass_new = md5( $pass_new );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":19,"full_filename":"DVWA/vulnerabilities/csrf/test_credentials.php","filename":"vulnerabilities/csrf/test_credentials.php","category_groups":["PII","Personal Data"],"source":{"start":19,"end":19,"column":{"start":10,"end":22}},"sink":{"start":19,"end":19,"column":{"start":10,"end":22},"content":""},"parent_line_number":19,"fingerprint":"ba77a97d5e161e1dd84962fc833516e9_0","old_fingerprint":"b48833819e37c249a97d89d58f4b0772_11","code_extract":"\t$pass = md5( $pass );"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":43,"full_filename":"DVWA/vulnerabilities/javascript/index.php","filename":"vulnerabilities/javascript/index.php","category_groups":["PII","Personal Data"],"source":{"start":43,"end":43,"column":{"start":20,"end":45}},"sink":{"start":43,"end":43,"column":{"start":20,"end":45},"content":""},"parent_line_number":43,"fingerprint":"216cd5116481e30ca7c7ca20e74e57b3_0","old_fingerprint":"0d290bb6add3b418c7f8a8ae9fae61d4_18","code_extract":"\t\t\t\t\tif ($token == md5(str_rot13(\"success\"))) {"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":18,"full_filename":"DVWA/vulnerabilities/upload/source/impossible.php","filename":"vulnerabilities/upload/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":18,"end":18,"column":{"start":20,"end":52}},"sink":{"start":18,"end":18,"column":{"start":20,"end":52},"content":""},"parent_line_number":18,"fingerprint":"034ccae34f6c57b45f085eed175bc55a_0","old_fingerprint":"1e9280fe1eeae71e4033c529e3fd8a8d_9","code_extract":"\t$target_file   =  md5( uniqid() . $uploaded_name ) . '.' . $uploaded_ext;"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":20,"full_filename":"DVWA/vulnerabilities/upload/source/impossible.php","filename":"vulnerabilities/upload/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":20,"end":20,"column":{"start":41,"end":73}},"sink":{"start":20,"end":20,"column":{"start":41,"end":73},"content":""},"parent_line_number":20,"fingerprint":"034ccae34f6c57b45f085eed175bc55a_1","old_fingerprint":"1e9280fe1eeae71e4033c529e3fd8a8d_12","code_extract":"\t$temp_file    .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . '.' . $uploaded_ext;"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_md","title":"Usage of weak hashing library (MDx)","description":"## Description\n\nUsing a weak hashing library, such as MD5, increases the risk of data breaches. MD5 itself is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use MD5 for hashing. This algorithm is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = md5($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms like SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_md","line_number":10,"full_filename":"DVWA/vulnerabilities/weak_id/source/high.php","filename":"vulnerabilities/weak_id/source/high.php","category_groups":["PII","Personal Data"],"source":{"start":10,"end":10,"column":{"start":18,"end":56}},"sink":{"start":10,"end":10,"column":{"start":18,"end":56},"content":""},"parent_line_number":10,"fingerprint":"dbf07e95c28d79966304c1e1e6389908_0","old_fingerprint":"596422baf0b9b7b1ead9827e6e063bcb_1","code_extract":"\t$cookie_value = md5($_SESSION['last_session_id_high']);"},{"cwe_ids":["328"],"id":"php_lang_weak_hash_sha1","title":"Usage of weak hashing library (SHA-1)","description":"## Description\n\nUsing a weak hashing library like SHA-1 increases the risk of data breaches. SHA-1 in particular is vulnerable to collision attacks, where two different inputs can produce the same hash value, compromising data integrity and security.\n\n## Remediations\n\n- **Do not** use SHA-1 for hashing. It is considered weak and vulnerable to attacks.\n  ```php\n  $encrypted = sha1($input); // unsafe\n  ```\n- **Do** opt for stronger hashing algorithms such as SHA-256 to enhance security.\n  ```php\n  $encrypted = hash('sha256', $input);\n  ```","documentation_url":"https://docs.bearer.com/reference/rules/php_lang_weak_hash_sha1","line_number":6,"full_filename":"DVWA/vulnerabilities/weak_id/source/impossible.php","filename":"vulnerabilities/weak_id/source/impossible.php","category_groups":["PII","Personal Data"],"source":{"start":6,"end":6,"column":{"start":18,"end":57}},"sink":{"start":6,"end":6,"column":{"start":18,"end":57},"content":""},"parent_line_number":6,"fingerprint":"6bbb053caa06a6d356054e06b07301d4_0","old_fingerprint":"757cce4f77447d74e42c15389b8abb06_0","code_extract":"\t$cookie_value = sha1(mt_rand() . time() . \"Impossible\");"}]}
